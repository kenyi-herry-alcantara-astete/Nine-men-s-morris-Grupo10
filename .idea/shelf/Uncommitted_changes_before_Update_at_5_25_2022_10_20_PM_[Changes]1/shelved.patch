Index: src/main/java/FirstPanel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import javax.swing.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\n\r\npublic class FirstPanel extends JFrame {\r\n\r\n\r\n    private JButton jugarButton;\r\n    private JPanel firstPanel;\r\n    private JTextField Nombre1;\r\n    private JTextField Nombre2;\r\n    public  JCheckBox jugador2CheckBox ;\r\n    public  JCheckBox jugador1CheckBox1;\r\n    private JLabel LabelNamePlayer1;\r\n    private JLabel LabelNamePlayer2;\r\n    private JPanel ifOtherPersonPanel;\r\n    private JButton siguienteButtonPeoples;\r\n    private JButton siguienteButtonComputer;\r\n    private JButton BtnOtraPersonaButton;\r\n    private JButton BtnComputadoraButton;\r\n    private JPanel withWhoPanel;\r\n    private JPanel inComputerPanel;\r\n    private JPanel turnPanel;\r\n    private JTextField computerOppnentName;\r\n\r\n    // \"otherPerson or computer\",\"namePlayer1\",\"namePlayer2,\"turn\"\r\n    public String[] configuration = {\"\",\"\",\"\",\"\"};\r\n\r\n    public FirstPanel() {\r\n        //Caracteristicas de la ventana que se va abrir\r\n\r\n        setContentPane(firstPanel);\r\n        //setSize(600,4);\r\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n        setBounds(250,100,720,520);\r\n        setBounds(250,100,820,620);\r\n        setVisible(true);\r\n\r\n        ifOtherPersonPanel.setVisible(false);\r\n        inComputerPanel.setVisible(false);\r\n        turnPanel.setVisible(false);\r\n\r\n\r\n\r\n        jugarButton.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n\r\n                MainFrame obj = new MainFrame();\r\n\r\n                obj.player1.name = configuration[1];\r\n                obj.player2.name = configuration[2];\r\n                obj.player1.type = \"left\";\r\n                obj.player2.type = \"right\";\r\n\r\n                if (configuration[3].equals(\"player1\")){\r\n                    obj.player1.turn = \"uno\";\r\n                    obj.player2.turn = \"dos\";\r\n                }\r\n\r\n                if (configuration[3].equals(\"player2\")){\r\n                    obj.player2.turn = \"uno\";\r\n                    obj.player1.turn = \"dos\";\r\n                }\r\n\r\n                if (configuration[0].equals(\"withTheComputer\")){\r\n                    obj.isPlayerAComputer = true;\r\n                }\r\n                if (configuration[0].equals(\"withOtherPerson\")){\r\n                    obj.isPlayerAComputer = false;\r\n                }\r\n                obj.setNameInTheUI();\r\n                obj.showTurnInUI();\r\n                System.out.println(configuration[0]+configuration[1]+configuration[2]+configuration[3]);\r\n\r\n                dispose();\r\n\r\n            }\r\n        });\r\n\r\n        BtnOtraPersonaButton.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                configuration[0] = \"withOtherPerson\";\r\n                withWhoPanel.setVisible(false);\r\n                ifOtherPersonPanel.setVisible(true);\r\n            }\r\n        });\r\n        BtnComputadoraButton.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                configuration[0] = \"withTheComputer\";\r\n                withWhoPanel.setVisible(false);\r\n                inComputerPanel.setVisible(true);\r\n            }\r\n        });\r\n        siguienteButtonPeoples.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n\r\n                configuration[1] = Nombre1.getText();\r\n                configuration[2] = Nombre2.getText();\r\n                ifOtherPersonPanel.setVisible(false);\r\n                turnPanel.setVisible(true);\r\n            }\r\n        });\r\n        siguienteButtonComputer.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                configuration[1] = computerOppnentName.getText();\r\n                configuration[2] = \"Computer\";\r\n                inComputerPanel.setVisible(false);\r\n                turnPanel.setVisible(true);\r\n            }\r\n        });\r\n        jugador1CheckBox1.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                configuration[3] = \"player1\";\r\n            }\r\n        });\r\n        jugador2CheckBox.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                configuration[3] = \"player2\";\r\n            }\r\n        });\r\n    }\r\n    public String getNamePlayer(int n){\r\n        if(n==1) {\r\n           return Nombre1.getText();\r\n        }\r\n        if(n==2) {\r\n           return Nombre2.getText();\r\n        }\r\n            return \" \";\r\n    }\r\n\r\n\r\n    public JPanel getFirstPanel(){\r\n        return  firstPanel;\r\n    }\r\n\r\n\r\n    private void createUIComponents() {\r\n        // TODO: place custom component creation code here\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/FirstPanel.java b/src/main/java/FirstPanel.java
--- a/src/main/java/FirstPanel.java	
+++ b/src/main/java/FirstPanel.java	
@@ -46,6 +46,9 @@
             @Override
             public void actionPerformed(ActionEvent e) {
 
+                String nombre1 , nombre2;
+                //nombre1 = getNamePlayer(1); //textNombre.getText();
+                //nombre2 = getNamePlayer(2);//miNombre.getText();
                 MainFrame obj = new MainFrame();
 
                 obj.player1.name = configuration[1];
Index: src/main/java/MainFrame.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.io.IOException;\r\nimport java.net.URI;\r\nimport java.net.URISyntaxException;\r\nimport java.util.logging.Level;\r\nimport java.util.logging.Logger;\r\n\r\n\r\npublic class MainFrame extends JFrame {\r\n\r\n\r\n\r\n    public Player player1 = new Player();\r\n    public Player player2 = new Player();\r\n\r\n    public boolean isPlayerAComputer = false;\r\n\r\n    public Logic currentLogicGame = new Logic();\r\n\r\n    ImageIcon IconWithPiece1 = new ImageIcon(\"src/main/resources/Image/IconWithPiece1.png\");\r\n    ImageIcon IconWithPiece2 = new ImageIcon(\"src/main/resources/Image/IconWithPiece2.png\");\r\n    ImageIcon IconContentEmpty = new ImageIcon(\"src/main/resources/Image/IconContentPiece.png\");\r\n    ImageIcon IconMove = new ImageIcon(\"src/main/resources/Image/AvailableContent.png\");\r\n\r\n    private JPanel PanelPrincipal;\r\n    private JPanel CenterPanel;\r\n    private JButton a7;\r\n    private JButton d7;\r\n    private JButton g7;\r\n    private JButton b6;\r\n    private JButton d6;\r\n    private JButton f6;\r\n    private JButton c5;\r\n    private JButton d5;\r\n    private JButton e5;\r\n    private JButton a4;\r\n    private JButton b4;\r\n    private JButton c4;\r\n    private JButton e4;\r\n    private JButton f4;\r\n    private JButton g4;\r\n    private JButton c3;\r\n    private JButton d3;\r\n    private JButton e3;\r\n    private JButton b2;\r\n    private JButton d2;\r\n    private JButton f2;\r\n    private JButton a1;\r\n    private JButton d1;\r\n    private JButton g1;\r\n    private JButton pieceLeft1;\r\n    private JButton pieceLeft2;\r\n    private JButton pieceLeft3;\r\n    private JButton pieceLeft4;\r\n    private JButton pieceLeft5;\r\n    private JButton pieceLeft6;\r\n    private JButton pieceLeft7;\r\n    private JButton pieceLeft8;\r\n    private JButton pieceLeft9;\r\n    private JButton pieceRight1;\r\n    private JButton pieceRight2;\r\n    private JButton pieceRight3;\r\n    private JButton pieceRight4;\r\n    private JButton pieceRight5;\r\n    private JButton pieceRight6;\r\n    private JButton pieceRight7;\r\n    private JButton pieceRight8;\r\n    private JButton pieceRight9;\r\n\r\n\r\n    private JButton[] pieceLeft = {pieceLeft1, pieceLeft2, pieceLeft3, pieceLeft4, pieceLeft5, pieceLeft6, pieceLeft7, pieceLeft8, pieceLeft9};\r\n    private JButton[] pieceRight = {pieceRight1, pieceRight2, pieceRight3, pieceRight4, pieceRight5, pieceRight6, pieceRight7, pieceRight8, pieceRight9};\r\n    JLabel namePlayerLeft;\r\n    JLabel namePlayerRight;\r\n    private JLabel showIUResult;\r\n\r\n\r\n    //Show the turn\r\n    public void showTurnInUI() {\r\n        if (player1.turn.equals(\"uno\")) {\r\n            if (namePlayerLeft.getText().equals(player1.name)) {\r\n                namePlayerLeft.setBackground(new Color(94, 0, 215));\r\n                namePlayerRight.setBackground(new Color(32, 36, 74));\r\n            } else {\r\n                namePlayerRight.setBackground(new Color(94, 0, 215));\r\n                namePlayerLeft.setBackground(new Color(32, 36, 74));\r\n            }\r\n        }\r\n\r\n        if (player2.turn.equals(\"uno\")){\r\n            if (namePlayerRight.getText().equals(player2.name)) {\r\n                namePlayerRight.setBackground(new Color(94, 0, 215));\r\n                namePlayerLeft.setBackground(new Color(32, 36, 74));\r\n            } else {\r\n                namePlayerLeft.setBackground(new Color(94, 0, 215));\r\n                namePlayerRight.setBackground(new Color(32, 36, 74));\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    //Change turn\r\n    public void changeTurn() {\r\n        String aux = player1.turn;\r\n        player1.turn = player2.turn;\r\n        player2.turn = aux;\r\n        showTurnInUI();\r\n\r\n    }\r\n\r\n    public int numberPiecesLeft = 9;\r\n    public int numberPiecesRight = 9;\r\n\r\n    private JButton lastButton = a7;\r\n    public int numberMove = 0;\r\n    // insetPieceToUI\r\n    public void insertPieceToUI(JButton contentPiece){\r\n        if (currentLogicGame.getIsAvailableContentPiece(contentPiece.getText())) {\r\n            if (numberPiecesLeft != 0 || numberPiecesRight != 0) {\r\n                if (player1.turn == \"uno\") {\r\n                    contentPiece.setIcon(IconWithPiece1);\r\n                    pieceLeft[9 - numberPiecesLeft].setIcon(IconContentEmpty);\r\n                    numberPiecesLeft--;\r\n                    currentLogicGame.insertPiece(contentPiece.getText(), \"1\");\r\n\r\n                } else {\r\n                    contentPiece.setIcon(IconWithPiece2);\r\n                    pieceRight[9 - numberPiecesRight].setIcon(IconContentEmpty);\r\n                    numberPiecesRight--;\r\n                    currentLogicGame.insertPiece(contentPiece.getText(), \"2\");\r\n                }\r\n                changeTurn();\r\n            } else {\r\n                System.out.println(\"Todas las piezas insertadas\");\r\n            }\r\n            currentLogicGame.setAvailableContentPiece(contentPiece.getText(), false);\r\n        }\r\n    }\r\n\r\n    int pushKeybord = 0;\r\n\r\n\r\n    //\r\n    public void setNameInTheUI(){\r\n        namePlayerLeft.setText(player1.name);\r\n        namePlayerRight.setText(player2.name);\r\n    }\r\n    //mover pieza\r\n    public void movePieceToUI(JButton myMoveContentPiece){\r\n\r\n        if (player1.turn == \"uno\") {\r\n\r\n            if (numberPiecesLeft == 0 && numberPiecesRight == 0 && myMoveContentPiece.getIcon() == IconWithPiece1 && numberMove == 0) {\r\n\r\n                lastButton = myMoveContentPiece;\r\n                myMoveContentPiece.setIcon(IconMove);\r\n                numberMove++;\r\n                System.out.println(numberMove);\r\n            }\r\n        }\r\n        if (player2.turn == \"uno\") {\r\n\r\n            if (numberPiecesLeft == 0 && numberPiecesRight == 0 && myMoveContentPiece.getIcon() == IconWithPiece2 && numberMove == 0) {\r\n\r\n                lastButton = myMoveContentPiece;\r\n                myMoveContentPiece.setIcon(IconMove);\r\n                numberMove++;\r\n                pushKeybord++;\r\n                System.out.println(numberMove);\r\n            }\r\n        }\r\n\r\n\r\n\r\n        if(numberMove == 1 && currentLogicGame.getIsAvailableContentPiece(myMoveContentPiece.getText())){\r\n            if(currentLogicGame.validateMove(myMoveContentPiece.getText(), lastButton.getText())) {\r\n                if (currentLogicGame.getIsAvailableContentPiece(myMoveContentPiece.getText())) {\r\n                    if (player1.turn == \"uno\") {\r\n                        System.out.println(numberMove);\r\n                        numberPiecesLeft++;\r\n                        currentLogicGame.movePiece(lastButton.getText());\r\n                        lastButton.setIcon(IconContentEmpty);\r\n                    } else {\r\n                        System.out.println(numberMove);\r\n                        numberPiecesRight++;\r\n                        currentLogicGame.movePiece(lastButton.getText());\r\n                        lastButton.setIcon(IconContentEmpty);\r\n                    }\r\n                    numberMove--;\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n    //Remove Opponent's pieces\r\n    public void removeOpponentsPiecesOfUI(JButton myContentPieceToRemove){\r\n\r\n        if(myContentPieceToRemove.getIcon() == IconWithPiece1){\r\n            myContentPieceToRemove.setIcon(IconContentEmpty);\r\n            currentLogicGame.removePiece(myContentPieceToRemove.getText());\r\n            player1.numberPieces --;\r\n        }\r\n\r\n            if(myContentPieceToRemove.getIcon() == IconWithPiece2){\r\n                myContentPieceToRemove.setIcon(IconContentEmpty);\r\n                currentLogicGame.removePiece(myContentPieceToRemove.getText());\r\n                player2.numberPieces --;\r\n            }\r\n            if(player1.numberPieces <= 2){\r\n                System.out.println(\"Gana el jugador 2\");\r\n                showIUResult.setText(\"Gana el jugador 2\");\r\n            }\r\n            if(player2.numberPieces <= 2){\r\n                System.out.println(\"Gana el jugador 1\");\r\n                showIUResult.setText(\"Gana el jugador 1\");\r\n            }\r\n\r\n            //Verificando si la pieza eliminada pertenecia a un tres en raya\r\n            if (currentLogicGame.isOneOfUnTresEnRaya(myContentPieceToRemove.getText())){\r\n                //Removing of the memory\r\n                currentLogicGame.removeOfTheMemory(myContentPieceToRemove.getText());\r\n            }\r\n\r\n        changeTurn();\r\n    }\r\n\r\n    //Action Player at the time\r\n    boolean existTicTacToe = false;\r\n\r\n    public void actionPlayerAtTheTime(JButton currentButtonAction) {\r\n\r\n        movePieceToUI(currentButtonAction);\r\n\r\n        if(!existTicTacToe){\r\n            if ((numberPiecesLeft != 0 || numberPiecesRight != 0) && (currentLogicGame.getIsAvailableContentPiece(currentButtonAction.getText()))) {\r\n                showIUResult.setText(\"\");\r\n                //In the Beginning\r\n                insertPieceToUI(currentButtonAction);\r\n\r\n                if (player1.turn == \"dos\"){\r\n                    existTicTacToe =  scoreThreeInARow(\"1\");\r\n                    if(existTicTacToe){\r\n                        // Mostrando alerta de tres en raya\r\n                        showIUResult.setText(\"Tres en raya para el jugador 1\");\r\n                        //Regresando el tunos, para que jueue nuevamente\r\n                        changeTurn();\r\n                    }\r\n                }\r\n                else {\r\n                    if(player2.turn == \"dos\"){\r\n                        existTicTacToe= scoreThreeInARow(\"2\");\r\n                        if (existTicTacToe){\r\n                            // Mostrando alerta de tres en raya\r\n                            showIUResult.setText(\"Tres en raya para el jugador 2\");\r\n                            //Regresando el tunos, para que jueue nuevamente\r\n                            changeTurn();\r\n                        }\r\n                    }\r\n                }\r\n\r\n            }\r\n        }else{\r\n            removeOpponentsPiecesOfUI(currentButtonAction);\r\n            existTicTacToe = false;\r\n            showIUResult.setText(\"\");\r\n            currentLogicGame.setAvailableContentPiece(currentButtonAction.getText(),true);\r\n        }\r\n    }\r\n\r\n\r\n    // Verifica tres en raya\r\n\r\n    public boolean scoreThreeInARow(String num) {\r\n        boolean threeInArrow = false;\r\n\r\n        for (int [][] oneGroupCase: currentLogicGame.CasesTresEnRaya) {\r\n            int x = oneGroupCase[0][0];\r\n            int y = oneGroupCase[0][1];\r\n            int r = oneGroupCase[1][0];\r\n            int s = oneGroupCase[1][1];\r\n            int m = oneGroupCase[2][0];\r\n            int n = oneGroupCase[2][1];\r\n\r\n            if (currentLogicGame.myTable[x][y].equals(num) && currentLogicGame.myTable[r][s].equals(num) && currentLogicGame.myTable[m][n].equals(num)) {\r\n                String caseTresEnRaya = \"\"+x+y+r+s+m+n;\r\n                System.out.println(caseTresEnRaya);\r\n\r\n                if(!currentLogicGame.isInTheMemory(caseTresEnRaya)){\r\n                    currentLogicGame.addToMemory(caseTresEnRaya);\r\n                    threeInArrow = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        return threeInArrow;\r\n    }\r\n\r\n    private void initPieces() {\r\n        initPiecesLeft();\r\n        initPiecesRight();\r\n    }\r\n\r\n    // Iniciar piezas sin jugar en la parte izquierda\r\n    private void initPiecesLeft() {\r\n        pieceLeft = new JButton[9];\r\n        pieceLeft[0] = pieceLeft1;\r\n        pieceLeft[1] = pieceLeft2;\r\n        pieceLeft[2] = pieceLeft3;\r\n        pieceLeft[3] = pieceLeft4;\r\n        pieceLeft[4] = pieceLeft5;\r\n        pieceLeft[5] = pieceLeft6;\r\n        pieceLeft[6] = pieceLeft7;\r\n        pieceLeft[7] = pieceLeft8;\r\n        pieceLeft[8] = pieceLeft9;\r\n        // Llenar los iconos\r\n        for (int i = 0; i < 9; i++) {\r\n            for (int j = 0; j < 9; j++) {\r\n                pieceLeft[i].setIcon(IconWithPiece1);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Iniciar piezas sin jugar en la parte derecha\r\n    private void initPiecesRight() {\r\n        pieceRight = new JButton[9];\r\n        pieceRight[0] = pieceRight1;\r\n        pieceRight[1] = pieceRight2;\r\n        pieceRight[2] = pieceRight3;\r\n        pieceRight[3] = pieceRight4;\r\n        pieceRight[4] = pieceRight5;\r\n        pieceRight[5] = pieceRight6;\r\n        pieceRight[6] = pieceRight7;\r\n        pieceRight[7] = pieceRight8;\r\n        pieceRight[8] = pieceRight9;\r\n        // Llenar los iconos\r\n        for (int i = 0; i < 9; i++) {\r\n            for (int j = 0; j < 9; j++) {\r\n                pieceRight[i].setIcon(IconWithPiece2);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public void restart() {\r\n        currentLogicGame.fillInBoxes();\r\n        currentLogicGame.fillMyTable();\r\n        numberPiecesLeft = 9;\r\n        numberPiecesRight = 9;\r\n        existTicTacToe = false;\r\n        showIUResult.setText(\"\");\r\n        initPieces();\r\n        // a\r\n        a7.setIcon(IconContentEmpty);\r\n        a4.setIcon(IconContentEmpty);\r\n        a1.setIcon(IconContentEmpty);\r\n        // b\r\n        b6.setIcon(IconContentEmpty);\r\n        b4.setIcon(IconContentEmpty);\r\n        b2.setIcon(IconContentEmpty);\r\n        // c\r\n        c5.setIcon(IconContentEmpty);\r\n        c4.setIcon(IconContentEmpty);\r\n        c3.setIcon(IconContentEmpty);\r\n        // d\r\n        d7.setIcon(IconContentEmpty);\r\n        d6.setIcon(IconContentEmpty);\r\n        d5.setIcon(IconContentEmpty);\r\n        d3.setIcon(IconContentEmpty);\r\n        d2.setIcon(IconContentEmpty);\r\n        d1.setIcon(IconContentEmpty);\r\n        // e\r\n        e5.setIcon(IconContentEmpty);\r\n        e4.setIcon(IconContentEmpty);\r\n        e3.setIcon(IconContentEmpty);\r\n        // f\r\n        f6.setIcon(IconContentEmpty);\r\n        f4.setIcon(IconContentEmpty);\r\n        f2.setIcon(IconContentEmpty);\r\n        // g\r\n        g7.setIcon(IconContentEmpty);\r\n        g4.setIcon(IconContentEmpty);\r\n        g1.setIcon(IconContentEmpty);\r\n    }\r\n\r\n    private void addMenuBar(){\r\n        // Barra de Menú\r\n        JMenuBar menuBar = new JMenuBar();\r\n\r\n        // Menú\r\n        JMenu menu = new JMenu(\"Menu\");\r\n        JMenu help = new JMenu(\"Ayuda\");\r\n\r\n        // Items del menú \"Menu\"\r\n        JMenuItem playAgain = new JMenuItem(\"Jugar de Nuevo\");\r\n        JMenuItem showResults = new JMenuItem(\"Mostrar Resultados\");\r\n        JMenuItem quit = new JMenuItem(\"Salir\");\r\n\r\n        // Item del menú \"ayuda\"\r\n        JMenuItem tutorial = new JMenuItem(\"Tutorial\");\r\n\r\n        // Iconos del menú \"Menu\"\r\n        ImageIcon imgPlayAgain = new ImageIcon(\"src/main/resources/Image/imgPlayAgain.png\");\r\n        ImageIcon imgShowResults = new ImageIcon(\"src/main/resources/Image/imgShowResults.png\");\r\n        ImageIcon imgQuit = new ImageIcon(\"src/main/resources/Image/imgQuit.png\");\r\n        playAgain.setIcon(imgPlayAgain);\r\n        showResults.setIcon(imgShowResults);\r\n        quit.setIcon(imgQuit);\r\n\r\n        // Iconos del menu \"Ayuda\"\r\n        ImageIcon imgTutorial = new ImageIcon(\"src/main/resources/Image/imgTutorial.png\");\r\n        tutorial.setIcon(imgTutorial);\r\n\r\n        // Evento para reinciar el juego\r\n        playAgain.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                restart();\r\n            }\r\n        });\r\n\r\n        // Evento para salir del juego\r\n        quit.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                System.exit(0);\r\n            }\r\n        });\r\n\r\n        // Eventos para ver tutorial\r\n        tutorial.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                try {\r\n                    Desktop.getDesktop().browse(new URI(\"http://www.dma.fi.upm.es/recursos/aplicaciones/matematicas_recreativas/web/nine_mens_morris/reglas.html\"));\r\n                } catch (URISyntaxException | IOException ex) {\r\n                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);\r\n                }\r\n            }\r\n        });\r\n\r\n        // Agragando items al menú \"Ayuda\"\r\n        help.add(tutorial);\r\n\r\n        // Agregando items al menu \"Menú\"\r\n        menu.add(playAgain);\r\n        menu.add(showResults);\r\n        menu.add(quit);\r\n\r\n        // Agregando menús(menu y ayuda) a la barra de menú\r\n        menuBar.add(menu);\r\n        menuBar.add(help);\r\n\r\n        // Agregando la barra de menú a la ventana\r\n        setJMenuBar(menuBar);\r\n    }\r\n\r\n\r\n    public MainFrame() {\r\n        //Caracteristicas de la ventana que se va abrir\r\n        setSize(300,300);\r\n        setContentPane(PanelPrincipal);\r\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n        setBounds(250,100,720,520);\r\n        setBounds(250,100,820,620);\r\n        setVisible(true);//mostrar la venta FirstPanel\r\n\r\n        addMenuBar();\r\n\r\n        a7.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                actionPlayerAtTheTime(a7);\r\n\r\n            }\r\n        });\r\n        b6.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                actionPlayerAtTheTime(b6);\r\n            }\r\n        });\r\n        d7.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                actionPlayerAtTheTime(d7);\r\n            }\r\n        });\r\n        g7.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                actionPlayerAtTheTime(g7);\r\n            }\r\n        });\r\n        d6.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                actionPlayerAtTheTime(d6);\r\n            }\r\n        });\r\n        f6.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                actionPlayerAtTheTime(f6);\r\n            }\r\n\r\n        });\r\n        c5.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                actionPlayerAtTheTime(c5);\r\n            }\r\n        });\r\n        d5.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                actionPlayerAtTheTime(d5);\r\n            }\r\n        });\r\n        e5.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                actionPlayerAtTheTime(e5);\r\n            }\r\n        });\r\n        a4.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                actionPlayerAtTheTime(a4);\r\n            }\r\n        });\r\n        b4.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                actionPlayerAtTheTime(b4);\r\n            }\r\n        });\r\n        c4.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                actionPlayerAtTheTime(c4);\r\n            }\r\n        });\r\n        e4.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                actionPlayerAtTheTime(e4);\r\n            }\r\n        });\r\n        f4.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                actionPlayerAtTheTime(f4);\r\n            }\r\n        });\r\n        g4.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                actionPlayerAtTheTime(g4);\r\n            }\r\n        });\r\n        c3.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                actionPlayerAtTheTime(c3);\r\n            }\r\n        });\r\n        d3.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                actionPlayerAtTheTime(d3);\r\n            }\r\n        });\r\n        e3.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                actionPlayerAtTheTime(e3);\r\n            }\r\n        });\r\n        b2.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                actionPlayerAtTheTime(b2);\r\n            }\r\n        });\r\n        d2.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                actionPlayerAtTheTime(d2);\r\n            }\r\n        });\r\n        f2.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                actionPlayerAtTheTime(f2);\r\n            }\r\n        });\r\n        a1.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                actionPlayerAtTheTime(a1);\r\n            }\r\n        });\r\n        d1.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                actionPlayerAtTheTime(d1);\r\n            }\r\n        });\r\n        g1.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                actionPlayerAtTheTime(g1);\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    public JPanel getPanelPrincipal(){\r\n        return  PanelPrincipal;\r\n    }\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/MainFrame.java b/src/main/java/MainFrame.java
--- a/src/main/java/MainFrame.java	
+++ b/src/main/java/MainFrame.java	
@@ -78,6 +78,16 @@
     private JLabel showIUResult;
 
 
+    //Methodos que enviaran las entradas de los jugarores
+    /**/
+
+    //Current Player
+    public Player currentTurn() {
+        if (player1.turn.equals("uno")) {
+            return player1;
+        } else return player2;
+    }
+
     //Show the turn
     public void showTurnInUI() {
         if (player1.turn.equals("uno")) {
@@ -268,6 +278,7 @@
             showIUResult.setText("");
             currentLogicGame.setAvailableContentPiece(currentButtonAction.getText(),true);
         }
+
     }
 
 
@@ -487,7 +498,7 @@
         d7.addActionListener(new ActionListener() {
             @Override
             public void actionPerformed(ActionEvent e) {
-                actionPlayerAtTheTime(d7);
+            actionPlayerAtTheTime(d7);
             }
         });
         g7.addActionListener(new ActionListener() {
@@ -505,121 +516,123 @@
         f6.addActionListener(new ActionListener() {
             @Override
             public void actionPerformed(ActionEvent e) {
-                actionPlayerAtTheTime(f6);
+            actionPlayerAtTheTime(f6);
             }
 
         });
         c5.addActionListener(new ActionListener() {
             @Override
             public void actionPerformed(ActionEvent e) {
-                actionPlayerAtTheTime(c5);
+            actionPlayerAtTheTime(c5);
             }
         });
         d5.addActionListener(new ActionListener() {
             @Override
             public void actionPerformed(ActionEvent e) {
-                actionPlayerAtTheTime(d5);
+            actionPlayerAtTheTime(d5);
             }
         });
         e5.addActionListener(new ActionListener() {
             @Override
             public void actionPerformed(ActionEvent e) {
-                actionPlayerAtTheTime(e5);
+            actionPlayerAtTheTime(e5);
             }
         });
         a4.addActionListener(new ActionListener() {
             @Override
             public void actionPerformed(ActionEvent e) {
-                actionPlayerAtTheTime(a4);
+            actionPlayerAtTheTime(a4);
             }
         });
         b4.addActionListener(new ActionListener() {
             @Override
             public void actionPerformed(ActionEvent e) {
-                actionPlayerAtTheTime(b4);
+            actionPlayerAtTheTime(b4);
             }
         });
         c4.addActionListener(new ActionListener() {
             @Override
             public void actionPerformed(ActionEvent e) {
-                actionPlayerAtTheTime(c4);
+            actionPlayerAtTheTime(c4);
             }
         });
         e4.addActionListener(new ActionListener() {
             @Override
             public void actionPerformed(ActionEvent e) {
-                actionPlayerAtTheTime(e4);
+            actionPlayerAtTheTime(e4);
             }
         });
         f4.addActionListener(new ActionListener() {
             @Override
             public void actionPerformed(ActionEvent e) {
-                actionPlayerAtTheTime(f4);
+            actionPlayerAtTheTime(f4);
             }
         });
         g4.addActionListener(new ActionListener() {
             @Override
             public void actionPerformed(ActionEvent e) {
-                actionPlayerAtTheTime(g4);
+            actionPlayerAtTheTime(g4);
             }
         });
         c3.addActionListener(new ActionListener() {
             @Override
             public void actionPerformed(ActionEvent e) {
-                actionPlayerAtTheTime(c3);
+            actionPlayerAtTheTime(c3);
             }
         });
         d3.addActionListener(new ActionListener() {
             @Override
             public void actionPerformed(ActionEvent e) {
-                actionPlayerAtTheTime(d3);
+            actionPlayerAtTheTime(d3);
             }
         });
         e3.addActionListener(new ActionListener() {
             @Override
             public void actionPerformed(ActionEvent e) {
-                actionPlayerAtTheTime(e3);
+            actionPlayerAtTheTime(e3);
             }
         });
         b2.addActionListener(new ActionListener() {
             @Override
             public void actionPerformed(ActionEvent e) {
-                actionPlayerAtTheTime(b2);
+            actionPlayerAtTheTime(b2);
             }
         });
         d2.addActionListener(new ActionListener() {
             @Override
             public void actionPerformed(ActionEvent e) {
-                actionPlayerAtTheTime(d2);
+            actionPlayerAtTheTime(d2);
             }
         });
         f2.addActionListener(new ActionListener() {
             @Override
             public void actionPerformed(ActionEvent e) {
-                actionPlayerAtTheTime(f2);
+            actionPlayerAtTheTime(f2);
             }
         });
         a1.addActionListener(new ActionListener() {
             @Override
             public void actionPerformed(ActionEvent e) {
-                actionPlayerAtTheTime(a1);
+            actionPlayerAtTheTime(a1);
             }
         });
         d1.addActionListener(new ActionListener() {
             @Override
             public void actionPerformed(ActionEvent e) {
-                actionPlayerAtTheTime(d1);
+            actionPlayerAtTheTime(d1);
             }
         });
         g1.addActionListener(new ActionListener() {
             @Override
             public void actionPerformed(ActionEvent e) {
-                actionPlayerAtTheTime(g1);
+            actionPlayerAtTheTime(g1);
             }
         });
 
     }
 
+
+
     public JPanel getPanelPrincipal(){
         return  PanelPrincipal;
     }
