Index: src/main/java/MainFrame.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.io.IOException;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\n\npublic class MainFrame extends JFrame {\n\n\n\n    public Player player1 = new Player();\n    public Player player2 = new Player();\n\n    public boolean isPlayerAComputer = false; //Estado si se esta jugando con la computadora\n    public String modeDifficulty = \"\"; //Nivel de la computadora : basic | estandar | expert\n\n    public Logic currentLogicGame = new Logic();\n\n    ImageIcon IconWithPiece1 = new ImageIcon(\"src/main/resources/Image/IconWithPiece1.png\");\n    ImageIcon IconWithPiece2 = new ImageIcon(\"src/main/resources/Image/IconWithPiece2.png\");\n    ImageIcon IconContentEmpty = new ImageIcon(\"src/main/resources/Image/IconContentPiece.png\");\n    ImageIcon IconMove = new ImageIcon(\"src/main/resources/Image/AvailableContent.png\");\n\n    private JPanel PanelPrincipal;\n    private JPanel CenterPanel;\n    private JButton a7;\n    private JButton d7;\n    private JButton g7;\n    private JButton b6;\n    private JButton d6;\n    private JButton f6;\n    private JButton c5;\n    private JButton d5;\n    private JButton e5;\n    private JButton a4;\n    private JButton b4;\n    private JButton c4;\n    private JButton e4;\n    private JButton f4;\n    private JButton g4;\n    private JButton c3;\n    private JButton d3;\n    private JButton e3;\n    private JButton b2;\n    private JButton d2;\n    private JButton f2;\n    private JButton a1;\n    private JButton d1;\n    private JButton g1;\n\n    private JButton [] allBtn = {a7, d7, g7, b6, d6, f6, c5, d5, e5, a4, b4, c4, e4, f4, g4, c3, d3, e3, b2, d2, f2, a1, d1, g1};\n    private JButton pieceLeft1;\n    private JButton pieceLeft2;\n    private JButton pieceLeft3;\n    private JButton pieceLeft4;\n    private JButton pieceLeft5;\n    private JButton pieceLeft6;\n    private JButton pieceLeft7;\n    private JButton pieceLeft8;\n    private JButton pieceLeft9;\n    private JButton pieceRight1;\n    private JButton pieceRight2;\n    private JButton pieceRight3;\n    private JButton pieceRight4;\n    private JButton pieceRight5;\n    private JButton pieceRight6;\n    private JButton pieceRight7;\n    private JButton pieceRight8;\n    private JButton pieceRight9;\n\n\n    private JButton[] pieceLeft = {pieceLeft1, pieceLeft2, pieceLeft3, pieceLeft4, pieceLeft5, pieceLeft6, pieceLeft7, pieceLeft8, pieceLeft9};\n    private JButton[] pieceRight = {pieceRight1, pieceRight2, pieceRight3, pieceRight4, pieceRight5, pieceRight6, pieceRight7, pieceRight8, pieceRight9};\n    JLabel namePlayerLeft;\n    JLabel namePlayerRight;\n    private JLabel showIUResult;\n\n\n    //Show the turn\n    public void showTurnInUI() {\n        if (player1.turn.equals(\"uno\")) {\n            if (namePlayerLeft.getText().equals(player1.name)) {\n                namePlayerLeft.setBackground(new Color(94, 0, 215));\n                namePlayerRight.setBackground(new Color(32, 36, 74));\n            } else {\n                namePlayerRight.setBackground(new Color(94, 0, 215));\n                namePlayerLeft.setBackground(new Color(32, 36, 74));\n            }\n        }\n\n        if (player2.turn.equals(\"uno\")){\n            if (namePlayerRight.getText().equals(player2.name)) {\n                namePlayerRight.setBackground(new Color(94, 0, 215));\n                namePlayerLeft.setBackground(new Color(32, 36, 74));\n            } else {\n                namePlayerLeft.setBackground(new Color(94, 0, 215));\n                namePlayerRight.setBackground(new Color(32, 36, 74));\n            }\n        }\n    }\n\n\n    //Change turn\n    public void changeTurn() {\n        String aux = player1.turn;\n        player1.turn = player2.turn;\n        player2.turn = aux;\n        showTurnInUI();\n\n    }\n\n    public int numberPiecesLeft = 9;\n    public int numberPiecesRight = 9;\n\n    private JButton lastButton;\n    public int numberMove = 0;\n    // insetPieceToUI\n    public void insertPieceToUI(JButton contentPiece){\n        if (currentLogicGame.getIsAvailableContentPiece(contentPiece.getText())) {\n            if (numberPiecesLeft != 0 || numberPiecesRight != 0) {\n                if (player1.turn == \"uno\") {\n                    contentPiece.setIcon(IconWithPiece1);\n                    pieceLeft[9 - numberPiecesLeft].setIcon(IconContentEmpty);\n                    numberPiecesLeft--;\n                    currentLogicGame.insertPiece(contentPiece.getText(), \"1\");\n\n                } else {\n                    contentPiece.setIcon(IconWithPiece2);\n                    pieceRight[9 - numberPiecesRight].setIcon(IconContentEmpty);\n                    numberPiecesRight--;\n                    currentLogicGame.insertPiece(contentPiece.getText(), \"2\");\n                }\n                changeTurn();\n            } else {\n                System.out.println(\"Todas las piezas insertadas\");\n            }\n            currentLogicGame.setAvailableContentPiece(contentPiece.getText(), false);\n        }\n    }\n\n    int pushKeybord = 0;\n\n\n    //\n    public void setNameInTheUI(){\n        namePlayerLeft.setText(player1.name);\n        namePlayerRight.setText(player2.name);\n    }\n    //mover pieza\n    public void movePieceToUI(JButton myMoveContentPiece){\n\n        if (player1.turn == \"uno\") {\n\n            if (numberPiecesLeft == 0 && numberPiecesRight == 0 && myMoveContentPiece.getIcon() == IconWithPiece1 && numberMove == 0 && player1.numberPieces > 3) {\n\n                lastButton = myMoveContentPiece;\n                myMoveContentPiece.setIcon(IconMove);\n                numberMove++;\n                System.out.println(numberMove);\n            }\n        }\n        if (player2.turn == \"uno\") {\n\n            if (numberPiecesLeft == 0 && numberPiecesRight == 0 && myMoveContentPiece.getIcon() == IconWithPiece2 && numberMove == 0 && player2.numberPieces > 3) {\n\n                lastButton = myMoveContentPiece;\n                myMoveContentPiece.setIcon(IconMove);\n                numberMove++;\n                pushKeybord++;\n                System.out.println(numberMove);\n            }\n        }\n\n\n\n        if(numberMove == 1 && currentLogicGame.getIsAvailableContentPiece(myMoveContentPiece.getText())){\n            if(currentLogicGame.validateMove(myMoveContentPiece.getText(), lastButton.getText())) {\n                if (currentLogicGame.getIsAvailableContentPiece(myMoveContentPiece.getText())) {\n                    if (player1.turn == \"uno\") {\n                        System.out.println(numberMove);\n                        numberPiecesLeft++;\n                        currentLogicGame.movePiece(lastButton.getText());\n                        lastButton.setIcon(IconContentEmpty);\n                    } else {\n                        System.out.println(numberMove);\n                        numberPiecesRight++;\n                        currentLogicGame.movePiece(lastButton.getText());\n                        lastButton.setIcon(IconContentEmpty);\n                    }\n                    numberMove--;\n                }\n            }\n        }\n\n    }\n\n    public void volarPieza(JButton myMoveContentPiece){\n        System.out.println(\"contando\"+player1.numberPieces);\n        if (player1.turn == \"uno\") {\n\n            if (numberPiecesLeft == 0 && numberPiecesRight == 0 && myMoveContentPiece.getIcon() == IconWithPiece1 && numberMove == 0 && player1.numberPieces <= 3) {\n\n                lastButton = myMoveContentPiece;\n                myMoveContentPiece.setIcon(IconMove);\n                numberMove++;\n                System.out.println(numberMove);\n            }\n        }\n        if (player2.turn == \"uno\") {\n\n            if (numberPiecesLeft == 0 && numberPiecesRight == 0 && myMoveContentPiece.getIcon() == IconWithPiece2 && numberMove == 0 && player2.numberPieces <= 3) {\n\n                lastButton = myMoveContentPiece;\n                myMoveContentPiece.setIcon(IconMove);\n                numberMove++;\n                pushKeybord++;\n                System.out.println(numberMove);\n            }\n        }\n        if(numberMove == 1 && currentLogicGame.getIsAvailableContentPiece(myMoveContentPiece.getText()) && (player2.numberPieces <= 3 || player1.numberPieces <= 3)){\n\n                if (currentLogicGame.getIsAvailableContentPiece(myMoveContentPiece.getText())) {\n                    if (player1.turn == \"uno\") {\n                        System.out.println(numberMove);\n                        numberPiecesLeft++;\n                        currentLogicGame.movePiece(lastButton.getText());\n                        lastButton.setIcon(IconContentEmpty);\n                    } else {\n                        System.out.println(numberMove);\n                        numberPiecesRight++;\n                        currentLogicGame.movePiece(lastButton.getText());\n                        lastButton.setIcon(IconContentEmpty);\n                    }\n                    numberMove--;\n                }\n\n        }\n    }\n    //Remove Opponent's pieces\n    public void removeOpponentsPiecesOfUI(JButton myContentPieceToRemove){\n\n        if(myContentPieceToRemove.getIcon() == IconWithPiece1){\n            myContentPieceToRemove.setIcon(IconContentEmpty);\n            currentLogicGame.removePiece(myContentPieceToRemove.getText());\n            player1.numberPieces --;\n        }\n\n            if(myContentPieceToRemove.getIcon() == IconWithPiece2){\n                myContentPieceToRemove.setIcon(IconContentEmpty);\n                currentLogicGame.removePiece(myContentPieceToRemove.getText());\n                player2.numberPieces --;\n            }\n            if(player1.numberPieces <= 2){\n                System.out.println(\"Gana el jugador 2\");\n                showIUResult.setText(\"Gana el jugador 2\");\n            }\n            if(player2.numberPieces <= 2){\n                System.out.println(\"Gana el jugador 1\");\n                showIUResult.setText(\"Gana el jugador 1\");\n            }\n\n            //Verificando si la pieza eliminada pertenecia a un tres en raya\n            if (currentLogicGame.isOneOfUnTresEnRaya(myContentPieceToRemove.getText())){\n                //Removing of the memory\n                currentLogicGame.removeOfTheMemory(myContentPieceToRemove.getText());\n            }\n\n        changeTurn();\n    }\n\n    //Moviendo pieza por la computadora\n    public void movePieceByTheComputer(){\n        //Preguntando si la computadora es el oponente y esta de turno\n       if (isPlayerAComputer && player2.turn == \"uno\" && numberPiecesLeft == 0 && numberPiecesRight == 0){\n           //Se llama dos veces ya que la computadora realizará inmediatamente\n           //luego de elegir que pieza movera\n           // la accion de mover\n           //\n\n           //En comparación al humano que lo hace en dos clicks\n\n           String[] parThePositions = currentLogicGame.getOptimalPositionToMove();\n           System.out.println(\"Part inicio:\"+parThePositions[0] + \" \"+ \"Part destino:\"+parThePositions[1]);\n\n           //Buscando la referencia a los botones de la GUI para la First position\n           //Luego aplica el primer paso para mover.\n           for (JButton myOneBtn:allBtn) {\n               if (myOneBtn.getText().equals(parThePositions[0])){\n                   System.out.println(\"Aqui 1\");\n                   movePieceToUI(myOneBtn); //Asignar la pieza que se moverá\n\n               }\n           }\n\n           //Buscando la referencia a los botones de la GUI para la End position\n           //Luego aplica el segundo paso para mover.\n           for (JButton myOneBtn:allBtn) {\n               if (myOneBtn.getText().equals(parThePositions[1])){\n                   System.out.println(\"Aqui 2\");\n                   actionPlayerAtTheTime(myOneBtn); //Inserta en el destino la pieza\n\n               }\n           }\n\n\n       }\n    }\n\n    //Action Player at the time\n    boolean existTicTacToe = false;\n\n    public void actionPlayerAtTheTime(JButton currentButtonAction) {\n\n        movePieceToUI(currentButtonAction);\n        volarPieza(currentButtonAction);\n\n        if(!existTicTacToe){\n            if ((numberPiecesLeft != 0 || numberPiecesRight != 0) && (currentLogicGame.getIsAvailableContentPiece(currentButtonAction.getText()))) {\n                showIUResult.setText(\"\");\n                //In the Beginning\n                insertPieceToUI(currentButtonAction);\n\n                if (player1.turn == \"dos\"){\n                    existTicTacToe =  scoreThreeInARow(\"1\");\n                    if(existTicTacToe){\n                        // Mostrando alerta de tres en raya\n                        showIUResult.setText(\"Tres en raya para el jugador 1\");\n                        //Regresando el tunos, para que jueue nuevamente\n                        changeTurn();\n                    }\n                }\n                else {\n                    if(player2.turn == \"dos\"){\n                        existTicTacToe= scoreThreeInARow(\"2\");\n                        if (existTicTacToe){\n                            // Mostrando alerta de tres en raya\n                            showIUResult.setText(\"Tres en raya para el jugador 2\");\n                            //Regresando el tunos, para que jueue nuevamente\n                            changeTurn();\n                        }\n                    }\n                }\n\n            }\n        }else{\n            removeOpponentsPiecesOfUI(currentButtonAction);\n            existTicTacToe = false;\n            showIUResult.setText(\"\");\n            currentLogicGame.setAvailableContentPiece(currentButtonAction.getText(),true);\n        }\n\n        //Siempre entra a este método, pero en el método se pregunta si\n        //la computadora puede mover o no. De lo contrario deja sin efecto.\n        if(isPlayerAComputer){\n            actionComputer();\n        }\n    }\n    public boolean scoreThreeInARowComputer(){\n        boolean validate = false;\n        validate = scoreThreeInARow(\"2\");\n        if (validate){\n            changeTurn();\n            // Mostrando alerta de tres en raya\n            showIUResult.setText(\"Tres en raya para Computador\");\n            //Regresando el tunos, para que jueue nuevamente\n           // removeOpponentsPiecesOfUI(c4);\n            if (!currentLogicGame.optimalPositionToRemove().equals(\"l\")) {\n                String parThePositions1 = currentLogicGame.optimalPositionToRemove();\n\n                for (JButton myOneBtn : allBtn) {\n                    if (myOneBtn.getText().equals((parThePositions1))) {\n                        removeOpponentsPiecesOfUI(myOneBtn); //Remueve en el destino la pieza\n                        showIUResult.setText(\"\");\n                        currentLogicGame.setAvailableContentPiece(myOneBtn.getText(),true);\n                        return true;\n                    }\n                }\n\n           }\n            for (JButton myOneBtn : allBtn){\n                int indexRow = currentLogicGame.whatIndexRow(myOneBtn.getText().charAt(1));\n                int indexColumn = currentLogicGame.whatIndexColumn(myOneBtn.getText().charAt(0));\n                if (currentLogicGame.myTable[indexRow][indexColumn] == \"1\") {\n                    removeOpponentsPiecesOfUI(myOneBtn); //Remueve en el destino la pieza\n                    showIUResult.setText(\"\");\n                    currentLogicGame.setAvailableContentPiece(myOneBtn.getText(),true);\n                    return true;\n                }\n            }\n\n            return true;\n        }\n        return false;\n    }\n    public boolean insertPieceByComputer(){\n        System.out.println(currentLogicGame.optimalPositionToInsert());\n        if (player2.turn == \"uno\" && (numberPiecesLeft != 0 || numberPiecesRight != 0)) {\n            if (!currentLogicGame.optimalPositionToInsert2().equals(\"l\")) {\n                String parThePositions1 = currentLogicGame.optimalPositionToInsert2();\n\n                for (JButton myOneBtn : allBtn) {\n                    if (myOneBtn.getText().equals((parThePositions1))) {\n                        insertPieceToUI(myOneBtn);\n                        return true;//Inserta en el destino la pieza\n                    }\n                }\n\n\n            }\n            if (!currentLogicGame.optimalPositionToInsert().equals(\"l\")) {\n                String parThePositions1 = currentLogicGame.optimalPositionToInsert();\n\n                for (JButton myOneBtn : allBtn) {\n                    if (myOneBtn.getText().equals((parThePositions1))) {\n                        insertPieceToUI(myOneBtn);\n                        return true;//Inserta en el destino la pieza\n                    }\n                }\n\n\n            }\n\n            System.out.println(\"llego aca1\");\n            if (currentLogicGame.getIsAvailableContentPiece(\"a1\")) {\n                System.out.println(\"llego aca2\");\n                insertPieceToUI(a1);\n                return true;\n            }\n            if (currentLogicGame.myTable[6][0] == \"2\" && currentLogicGame.getIsAvailableContentPiece(\"g7\")) {\n                System.out.println(\"llego aca3\");\n                insertPieceToUI(g7);\n                return true;\n            }\n           if(currentLogicGame.myTable[6][0] == \"2\" && currentLogicGame.myTable[0][6] == \"2\" && currentLogicGame.availableBox[6][6]){\n                System.out.println(\"llego aca4\");\n                insertPieceToUI(g1);\n                return true;\n            }\n        }\n        for (JButton myOneBtn : allBtn){\n            int indexRow = currentLogicGame.whatIndexRow(myOneBtn.getText().charAt(1));\n            int indexColumn = currentLogicGame.whatIndexColumn(myOneBtn.getText().charAt(0));\n            if (currentLogicGame.myTable[indexRow][indexColumn] == \"0\" && currentLogicGame.availableBox[indexRow][indexColumn]) {\n               insertPieceToUI(myOneBtn);\n                return true;\n            }\n        }\n\n        return false;\n    }\n    public void actionComputer(){\n            insertPieceByComputer();\n            movePieceByTheComputer();\n            scoreThreeInARowComputer();\n    }\n\n\n    // Verifica tres en raya\n\n    public boolean scoreThreeInARow(String num) {\n        boolean threeInArrow = false;\n\n        for (int [][] oneGroupCase: currentLogicGame.CasesTresEnRaya) {\n            int x = oneGroupCase[0][0];\n            int y = oneGroupCase[0][1];\n            int r = oneGroupCase[1][0];\n            int s = oneGroupCase[1][1];\n            int m = oneGroupCase[2][0];\n            int n = oneGroupCase[2][1];\n\n            if (currentLogicGame.myTable[x][y].equals(num) && currentLogicGame.myTable[r][s].equals(num) && currentLogicGame.myTable[m][n].equals(num)) {\n                String caseTresEnRaya = \"\"+x+y+r+s+m+n;\n                System.out.println(caseTresEnRaya);\n\n                if(!currentLogicGame.isInTheMemory(caseTresEnRaya)){\n                    currentLogicGame.addToMemory(caseTresEnRaya);\n                    threeInArrow = true;\n                    break;\n                }\n            }\n\n        }\n\n        return threeInArrow;\n    }\n\n    private void initPieces() {\n        initPiecesLeft();\n        initPiecesRight();\n    }\n\n    // Iniciar piezas sin jugar en la parte izquierda\n    private void initPiecesLeft() {\n        pieceLeft = new JButton[9];\n        pieceLeft[0] = pieceLeft1;\n        pieceLeft[1] = pieceLeft2;\n        pieceLeft[2] = pieceLeft3;\n        pieceLeft[3] = pieceLeft4;\n        pieceLeft[4] = pieceLeft5;\n        pieceLeft[5] = pieceLeft6;\n        pieceLeft[6] = pieceLeft7;\n        pieceLeft[7] = pieceLeft8;\n        pieceLeft[8] = pieceLeft9;\n        // Llenar los iconos\n        for (int i = 0; i < 9; i++) {\n            for (int j = 0; j < 9; j++) {\n                pieceLeft[i].setIcon(IconWithPiece1);\n            }\n        }\n    }\n\n    // Iniciar piezas sin jugar en la parte derecha\n    private void initPiecesRight() {\n        pieceRight = new JButton[9];\n        pieceRight[0] = pieceRight1;\n        pieceRight[1] = pieceRight2;\n        pieceRight[2] = pieceRight3;\n        pieceRight[3] = pieceRight4;\n        pieceRight[4] = pieceRight5;\n        pieceRight[5] = pieceRight6;\n        pieceRight[6] = pieceRight7;\n        pieceRight[7] = pieceRight8;\n        pieceRight[8] = pieceRight9;\n        // Llenar los iconos\n        for (int i = 0; i < 9; i++) {\n            for (int j = 0; j < 9; j++) {\n                pieceRight[i].setIcon(IconWithPiece2);\n            }\n        }\n    }\n\n\n    public void restart() {\n        currentLogicGame.fillInBoxes();\n        currentLogicGame.fillMyTable();\n        numberPiecesLeft = 9;\n        numberPiecesRight = 9;\n        existTicTacToe = false;\n        showIUResult.setText(\"\");\n        initPieces();\n        // a\n        a7.setIcon(IconContentEmpty);\n        a4.setIcon(IconContentEmpty);\n        a1.setIcon(IconContentEmpty);\n        // b\n        b6.setIcon(IconContentEmpty);\n        b4.setIcon(IconContentEmpty);\n        b2.setIcon(IconContentEmpty);\n        // c\n        c5.setIcon(IconContentEmpty);\n        c4.setIcon(IconContentEmpty);\n        c3.setIcon(IconContentEmpty);\n        // d\n        d7.setIcon(IconContentEmpty);\n        d6.setIcon(IconContentEmpty);\n        d5.setIcon(IconContentEmpty);\n        d3.setIcon(IconContentEmpty);\n        d2.setIcon(IconContentEmpty);\n        d1.setIcon(IconContentEmpty);\n        // e\n        e5.setIcon(IconContentEmpty);\n        e4.setIcon(IconContentEmpty);\n        e3.setIcon(IconContentEmpty);\n        // f\n        f6.setIcon(IconContentEmpty);\n        f4.setIcon(IconContentEmpty);\n        f2.setIcon(IconContentEmpty);\n        // g\n        g7.setIcon(IconContentEmpty);\n        g4.setIcon(IconContentEmpty);\n        g1.setIcon(IconContentEmpty);\n\n        // Escoger Turno\n        chooseTurn();\n    }\n\n    // Escoger turno\n    private void  chooseTurn(){\n        WhoPlaysFirst whoPlaysFirst = new WhoPlaysFirst(this, true, player1.name, player2.name);\n        whoPlaysFirst.pack();\n        whoPlaysFirst.setVisible(true);\n        String turn = whoPlaysFirst.getTurn();\n        if(player1.name.equals(turn)){\n            player1.turn = \"uno\";\n            player2.turn = \"dos\";\n        }else{\n            player2.turn = \"uno\";\n            player1.turn = \"dos\";\n        }\n        showTurnInUI();\n    }\n\n    private void addMenuBar(){\n        // Barra de Menú\n        JMenuBar menuBar = new JMenuBar();\n\n        // Menús en la Barra de Menú\n        JMenu menu = new JMenu(\"Menu\");\n        JMenu help = new JMenu(\"Ayuda\");\n\n        // items del menú \"menu\"\n        JMenuItem playAgain = new JMenuItem(\"Jugar de Nuevo\");\n        JMenuItem showResults = new JMenuItem(\"Mostrar Resultados\");\n        JMenuItem quit = new JMenuItem(\"Salir\");\n\n        // items de menú \"ayuda\"\n        JMenuItem tutorial = new JMenuItem(\"Tutorial\");\n\n        // Iconos del menú \"Menu\"\n        ImageIcon imgPlayAgain = new ImageIcon(\"src/main/resources/Image/imgPlayAgain.png\");\n        ImageIcon imgShowResults = new ImageIcon(\"src/main/resources/Image/imgShowResults.png\");\n        ImageIcon imgQuit = new ImageIcon(\"src/main/resources/Image/imgQuit.png\");\n        playAgain.setIcon(imgPlayAgain);\n        showResults.setIcon(imgShowResults);\n        quit.setIcon(imgQuit);\n\n        // Iconos del menu \"Ayuda\"\n        ImageIcon imgTutorial = new ImageIcon(\"src/main/resources/Image/imgTutorial.png\");\n        tutorial.setIcon(imgTutorial);\n\n        // Evento para reinciar el juego\n        playAgain.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                restart();\n            }\n        });\n\n        // Evento para salir del juego\n        quit.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                System.exit(0);\n            }\n        });\n\n        // Eventos para ver tutorial\n        tutorial.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                try {\n                    Desktop.getDesktop().browse(new URI(\"http://www.dma.fi.upm.es/recursos/aplicaciones/matematicas_recreativas/web/nine_mens_morris/reglas.html\"));\n                } catch (URISyntaxException | IOException ex) {\n                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);\n                }\n            }\n        });\n        // Colores\n        menu.setForeground(Color.white);\n        help.setForeground(Color.white);\n        menuBar.setBackground(new Color(43, 43, 43));\n\n        // Agragando items al menú \"ayuda\"\n        help.add(tutorial);\n\n        // Agregando items al menu \"menu\"\n        menu.add(playAgain);\n        menu.add(showResults);\n        menu.add(quit);\n\n        // Agregando menús(menu y ayuda) a la barra de menú\n        menuBar.add(menu);\n        menuBar.add(help);\n\n        // Agregando la barra de menú a la ventana\n        setJMenuBar(menuBar);\n    }\n\n\n    public MainFrame() {\n        //Caracteristicas de la ventana que se va abrir\n        setSize(300,300);\n        setContentPane(PanelPrincipal);\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        setBounds(250,100,720,520);\n        setBounds(250,100,820,620);\n        setVisible(true);//mostrar la venta FirstPanel\n\n        addMenuBar();\n\n        a7.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                actionPlayerAtTheTime(a7);\n\n            }\n        });\n        b6.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                actionPlayerAtTheTime(b6);\n            }\n        });\n        d7.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                actionPlayerAtTheTime(d7);\n            }\n        });\n        g7.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                actionPlayerAtTheTime(g7);\n            }\n        });\n        d6.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                actionPlayerAtTheTime(d6);\n            }\n        });\n        f6.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                actionPlayerAtTheTime(f6);\n            }\n\n        });\n        c5.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                actionPlayerAtTheTime(c5);\n            }\n        });\n        d5.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                actionPlayerAtTheTime(d5);\n            }\n        });\n        e5.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                actionPlayerAtTheTime(e5);\n            }\n        });\n        a4.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                actionPlayerAtTheTime(a4);\n            }\n        });\n        b4.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                actionPlayerAtTheTime(b4);\n            }\n        });\n        c4.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                actionPlayerAtTheTime(c4);\n            }\n        });\n        e4.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                actionPlayerAtTheTime(e4);\n            }\n        });\n        f4.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                actionPlayerAtTheTime(f4);\n            }\n        });\n        g4.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                actionPlayerAtTheTime(g4);\n            }\n        });\n        c3.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                actionPlayerAtTheTime(c3);\n            }\n        });\n        d3.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                actionPlayerAtTheTime(d3);\n            }\n        });\n        e3.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                actionPlayerAtTheTime(e3);\n            }\n        });\n        b2.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                actionPlayerAtTheTime(b2);\n            }\n        });\n        d2.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                actionPlayerAtTheTime(d2);\n            }\n        });\n        f2.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                actionPlayerAtTheTime(f2);\n            }\n        });\n        a1.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                actionPlayerAtTheTime(a1);\n            }\n        });\n        d1.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                actionPlayerAtTheTime(d1);\n            }\n        });\n        g1.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                actionPlayerAtTheTime(g1);\n            }\n        });\n\n    }\n\n    public JPanel getPanelPrincipal(){\n        return  PanelPrincipal;\n    }\n\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/MainFrame.java b/src/main/java/MainFrame.java
--- a/src/main/java/MainFrame.java	(revision bd869e5b434f90454b79fba160b232eea7cb3eb0)
+++ b/src/main/java/MainFrame.java	(date 1653713669097)
@@ -201,28 +201,29 @@
 
     public void volarPieza(JButton myMoveContentPiece){
         System.out.println("contando"+player1.numberPieces);
-        if (player1.turn == "uno") {
+        if(player2.numberPieces <= 3 || player1.numberPieces <= 3){
+            if (player1.turn == "uno") {
 
-            if (numberPiecesLeft == 0 && numberPiecesRight == 0 && myMoveContentPiece.getIcon() == IconWithPiece1 && numberMove == 0 && player1.numberPieces <= 3) {
+                if (numberPiecesLeft == 0 && numberPiecesRight == 0 && myMoveContentPiece.getIcon() == IconWithPiece1 && numberMove == 0 && player1.numberPieces <= 3) {
 
-                lastButton = myMoveContentPiece;
-                myMoveContentPiece.setIcon(IconMove);
-                numberMove++;
-                System.out.println(numberMove);
-            }
-        }
-        if (player2.turn == "uno") {
+                    lastButton = myMoveContentPiece;
+                    myMoveContentPiece.setIcon(IconMove);
+                    numberMove++;
+                    System.out.println(numberMove);
+                }
+            }
+            if (player2.turn == "uno") {
 
-            if (numberPiecesLeft == 0 && numberPiecesRight == 0 && myMoveContentPiece.getIcon() == IconWithPiece2 && numberMove == 0 && player2.numberPieces <= 3) {
+                if (numberPiecesLeft == 0 && numberPiecesRight == 0 && myMoveContentPiece.getIcon() == IconWithPiece2 && numberMove == 0 && player2.numberPieces <= 3) {
 
-                lastButton = myMoveContentPiece;
-                myMoveContentPiece.setIcon(IconMove);
-                numberMove++;
-                pushKeybord++;
-                System.out.println(numberMove);
-            }
-        }
-        if(numberMove == 1 && currentLogicGame.getIsAvailableContentPiece(myMoveContentPiece.getText()) && (player2.numberPieces <= 3 || player1.numberPieces <= 3)){
+                    lastButton = myMoveContentPiece;
+                    myMoveContentPiece.setIcon(IconMove);
+                    numberMove++;
+                    pushKeybord++;
+                    System.out.println(numberMove);
+                }
+            }
+            if(numberMove == 1 && currentLogicGame.getIsAvailableContentPiece(myMoveContentPiece.getText()) && (player2.numberPieces <= 3 || player1.numberPieces <= 3)){
 
                 if (currentLogicGame.getIsAvailableContentPiece(myMoveContentPiece.getText())) {
                     if (player1.turn == "uno") {
@@ -239,6 +240,7 @@
                     numberMove--;
                 }
 
+            }
         }
     }
     //Remove Opponent's pieces
@@ -273,6 +275,7 @@
         changeTurn();
     }
 
+
     //Moviendo pieza por la computadora
     public void movePieceByTheComputer(){
         //Preguntando si la computadora es el oponente y esta de turno
@@ -302,6 +305,8 @@
            for (JButton myOneBtn:allBtn) {
                if (myOneBtn.getText().equals(parThePositions[1])){
                    System.out.println("Aqui 2");
+
+
                    actionPlayerAtTheTime(myOneBtn); //Inserta en el destino la pieza
 
                }
@@ -316,8 +321,10 @@
 
     public void actionPlayerAtTheTime(JButton currentButtonAction) {
 
-        movePieceToUI(currentButtonAction);
-        volarPieza(currentButtonAction);
+
+           movePieceToUI(currentButtonAction);
+           //volarPieza(currentButtonAction);
+
 
         if(!existTicTacToe){
             if ((numberPiecesLeft != 0 || numberPiecesRight != 0) && (currentLogicGame.getIsAvailableContentPiece(currentButtonAction.getText()))) {
@@ -347,6 +354,7 @@
                 }
 
             }
+
         }else{
             removeOpponentsPiecesOfUI(currentButtonAction);
             existTicTacToe = false;
@@ -360,6 +368,15 @@
             actionComputer();
         }
     }
+
+    public void actionComputer(){
+        if(numberPiecesRight != 0){
+            insertPieceByComputer();
+        }
+        movePieceByTheComputer();
+        scoreThreeInARowComputer();
+    }
+
     public boolean scoreThreeInARowComputer(){
         boolean validate = false;
         validate = scoreThreeInARow("2");
@@ -453,11 +470,6 @@
 
         return false;
     }
-    public void actionComputer(){
-            insertPieceByComputer();
-            movePieceByTheComputer();
-            scoreThreeInARowComputer();
-    }
 
 
     // Verifica tres en raya
Index: src/main/java/Logic.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.ArrayList;\n\npublic class Logic {\n\n\n    // Orden de la matriz\n    private int n = 7;\n    // Matriz de casillas disponibles\n    protected boolean[][] availableBox = new boolean[n][n];\n    //Matriz tabla que muestra las jugadas en el tiempo\n    protected String[][] myTable = new String[n][n];\n\n    //CasesTresEnRaya\n    int[][][] CasesTresEnRaya = Constants.getCasesTresEnRaya();\n\n    //Matriz recuerdo\n    protected ArrayList<String> MenoryTreEnRaya = new ArrayList<String>();\n\n    public boolean isInTheMemory(String caseTresEnRaya){\n        boolean res = false;\n\n        for (String oneCase: MenoryTreEnRaya){\n            if(oneCase.equals(caseTresEnRaya)){\n                res = true;\n            }\n        }\n        return  res;\n\n    }\n\n    public void addToMemory(String caseTresEnRaya){\n        MenoryTreEnRaya.add(caseTresEnRaya);\n    }\n\n    public void removeOfTheMemory(String positionPiece){\n\n\n        int indexRow = whatIndexRow(positionPiece.charAt(1));\n        int indexColumn = whatIndexColumn(positionPiece.charAt(0));\n\n        String posititon = \"\"+indexRow+\"\"+indexColumn;\n        ArrayList <String> Temporary = new ArrayList<String>();\n\n        for ( String groupPosition:MenoryTreEnRaya) {\n           if (MenoryTreEnRaya.size() != 0){\n               String one = groupPosition.substring(0,2);\n               String two = groupPosition.substring(2,4);\n               String three = groupPosition.substring(4,6);\n               if (one.equals(posititon) || two.equals(posititon) || three.equals(posititon)) {\n                   Temporary.add(one+two+three);\n               }\n           }\n        }\n        for (String group:Temporary) {\n            MenoryTreEnRaya.remove(group);\n        }\n        //Elimnando Temporary\n        Temporary.clear();\n\n    }\n\n\n\n    public boolean isOneOfUnTresEnRaya(String positionPiece){\n\n        int indexRow = whatIndexRow(positionPiece.charAt(1));\n        int indexColumn = whatIndexColumn(positionPiece.charAt(0));\n\n        String posititon = \"\"+indexRow+\"\"+indexColumn;\n\n        for ( String groupPosition:MenoryTreEnRaya) {\n            String one = groupPosition.substring(0,2);\n            String two = groupPosition.substring(2,4);\n            String three = groupPosition.substring(4,6);\n            if (one.equals(posititon) || two.equals(posititon) || three.equals(posititon)) return true;\n        }\n        return false;\n    }\n\n\n    public Logic() {\n        fillInBoxes();\n        fillMyTable();\n    }\n\n    public void fillInBoxes() {\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                availableBox[i][j] = true;\n            }\n        }\n        for (int [] onePositionInvalid : Constants.getPositionInvalid()) {\n            availableBox[onePositionInvalid[0]][onePositionInvalid[1]] = false;\n        }\n    }\n\n    public void fillMyTable() {\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                myTable[i][j] = \"0\";\n            }\n        }\n    }\n\n    public void showMatrixTableInTHeConsole() {\n        System.out.println(\"--------------------------------\");\n\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                System.out.print(myTable[i][j] + \" \");\n            }\n            System.out.println();\n        }\n\n    }\n\n    //Recibe las notacions de la tabla GUI y retorna la position para la tabla logica.\n    public int whatIndexColumn(char notationColumn) {\n        return Character.getNumericValue(notationColumn) - 10;\n    }\n\n    public int whatIndexRow(char notationRow) {\n     return 7-Character.getNumericValue(notationRow);\n    }\n\n    //Recibe la postion de la tabla logica y retorna las notaciones de la tabla de la GUI.\n    public String whatNotationColumn(int indexColumn) {\n        return Constants.getLettersAndNumbersEquivalent(indexColumn);\n    }\n\n    public String whatNotationRow(int indexRow) {\n        return \"\"+(7-indexRow);\n    }\n\n\n    public void insertPiece(String positionPiece, String player1o2) {\n\n        int indexRow = whatIndexRow(positionPiece.charAt(1));\n        int indexColumn = whatIndexColumn(positionPiece.charAt(0));\n        if (availableBox[indexRow][indexColumn]) {\n            myTable[indexRow][indexColumn] = player1o2;\n            showMatrixTableInTHeConsole();\n            availableBox[indexRow][indexColumn] = false;\n        }\n    }\n\n    public void removePiece(String positionPiece) {\n        int indexRow = whatIndexRow(positionPiece.charAt(1));\n        int indexColumn = whatIndexColumn(positionPiece.charAt(0));\n        myTable[indexRow][indexColumn] = \"0\";\n        showMatrixTableInTHeConsole();\n        setAvailableContentPiece(positionPiece, true);\n    }\n\n\n    public void movePiece(String positionPieceToRemove) {\n        //RemovePiece\n        //SetNewPiece\n        setAvailableContentPiece(positionPieceToRemove, true);\n        removePiece(positionPieceToRemove);\n        //insertPiece(newPositionPiece,removePiece(positionPieceToRemove));\n    }\n\n    //Metodos utilizados por la computadora a la hora de mover una pieza\n\n    //Devuelve un par de positions de piezas optimos que la computadora debe mover\n    //[\"Inicio\",\"Destiono\"]\n    public String[] getOptimalPositionToMove(){\n        String inicio = \"\";\n        String destino = \"\";\n\n        int[] posiblePositionToMove = {-1,-1};\n\n        //1)Primera instancia\n        //Verificamos si hay un posible tres en raya del oponente humano\n        for (int[][] gPosTresR:Constants.getCasesTresEnRaya()) {\n\n            int x,y,m,n,r,p; //(x,y), (m,n), (r,p) Grupo de tres en raya\n            x = gPosTresR[0][0];\n            y = gPosTresR[0][1];\n            m = gPosTresR[1][0];\n            n = gPosTresR[1][1];\n            r = gPosTresR[2][0];\n            p = gPosTresR[2][1];\n\n            //Verificando para el oponente humano, posibles tres en raya futuros\n            //Entonces la computadora tratará de mover al lugar con valor \"0\"\n            //de dicho posible tres en raya futuro.\n\n            //1)Buscamos el lugar que tendrá que mover la computadora para evitar el\n            //tres en raya del oponente humano\n\n            if (myTable[x][y].equals(\"1\") && myTable[m][n].equals(\"1\") && myTable[r][p].equals(\"0\")){\n                posiblePositionToMove[0] = r;\n                posiblePositionToMove[1] = p;\n            }else if (myTable[x][y].equals(\"1\") && myTable[m][n].equals(\"0\") && myTable[r][p].equals(\"1\")){\n                posiblePositionToMove[0] = m;\n                posiblePositionToMove[1] = n;\n            }else if (myTable[x][y].equals(\"0\") && myTable[m][n].equals(\"1\") && myTable[r][p].equals(\"1\")){\n                posiblePositionToMove[0] = x;\n                posiblePositionToMove[1] = y;\n\n            }\n            boolean encontrado = false;\n            //2)Buscando si la computadora tiene piezas adyacentes al posiblePositionToMove\n            for (int [][] oneGrupoAdy:Constants.getAdjALasPiezas()) { //Recorriendo la matriz de adyacencia\n                // para cada contenedor de piezas.\n                if(oneGrupoAdy[0][0] == posiblePositionToMove[0] && oneGrupoAdy[0][1] == posiblePositionToMove[1]){\n                    //Verificando si sus adyacentes contienen piezas de tipo \"2\". (Es decir piezas de la computadora).\n                    for (int i = 1; i < oneGrupoAdy.length; i++) { //Recorriendo sus adyacentes\n                        if (myTable[oneGrupoAdy[i][0]][oneGrupoAdy[i][1]].equals(\"2\")){\n                            //Asignado inicio\n                            inicio = whatNotationColumn(oneGrupoAdy[i][1])+ whatNotationRow(oneGrupoAdy[i][0]);\n                            //Asignando destino\n                            destino =whatNotationColumn(posiblePositionToMove[1])+whatNotationRow(posiblePositionToMove[0]);\n                            System.out.println(\"Inicio:\"+oneGrupoAdy[i][0]+\" \"+oneGrupoAdy[0][1]);\n                            System.out.println(\"Destino:\"+posiblePositionToMove[0]+\" \"+posiblePositionToMove[1]);\n                            System.out.println(inicio);\n                            encontrado = true;\n                            String[] response = {inicio,destino};\n                            return response;\n                        }\n                    }\n                    break;\n                }\n            }\n            if (encontrado){\n                break;\n            }\n        }\n\n        //Reasignamos al valor original, para hacer una nueva búsqueda.\n        posiblePositionToMove[0] = -1; //\n        posiblePositionToMove[1] = -1; //\n        //2)Instancia\n        //Que la computadora busque formar un tres en raya\n\n        for (int[][] gPosTresR:Constants.getCasesTresEnRaya()) {\n\n            int x,y,m,n,r,p; //(x,y), (m,n), (r,p) Grupo de tres en raya\n            x = gPosTresR[0][0];\n            y = gPosTresR[0][1];\n            m = gPosTresR[1][0];\n            n = gPosTresR[1][1];\n            r = gPosTresR[2][0];\n            p = gPosTresR[2][1];\n\n            //Verificando si puede formar un posible tres en raya.\n            //Entonces la computadora tratará de mover al lugar con valor \"0\"\n            //para completar el tres en raya\n\n            //1)Buscamos el lugar que tendrá que mover la computadora para formar el\n            //tres en raya\n\n            if (myTable[x][y].equals(\"2\") && myTable[m][n].equals(\"2\") && myTable[r][p].equals(\"0\")){\n                posiblePositionToMove[0] = r;\n                posiblePositionToMove[1] = p;\n            }else if (myTable[x][y].equals(\"2\") && myTable[m][n].equals(\"0\") && myTable[r][p].equals(\"2\")){\n                posiblePositionToMove[0] = m;\n                posiblePositionToMove[1] = n;\n            }else if (myTable[x][y].equals(\"0\") && myTable[m][n].equals(\"2\") && myTable[r][p].equals(\"2\")){\n                posiblePositionToMove[0] = x;\n                posiblePositionToMove[1] = y;\n\n            }\n            boolean encontrado = false;\n            //2)Buscando si la computadora tiene piezas adyacentes al posiblePositionToMove\n            for (int [][] oneGrupoAdy:Constants.getAdjALasPiezas()) { //Recorriendo la matriz de adyacencia\n                // para cada contenedor de piezas.\n                if(oneGrupoAdy[0][0] == posiblePositionToMove[0] && oneGrupoAdy[0][1] == posiblePositionToMove[1]){\n                    //Verificando si sus adyacentes contienen piezas de tipo \"2\". (Es decir piezas de la computadora).\n                    for (int i = 1; i < oneGrupoAdy.length; i++) { //Recorriendo sus adyacentes\n                        if (myTable[oneGrupoAdy[i][0]][oneGrupoAdy[i][1]].equals(\"2\")){\n                            //Asignado inicio\n                            inicio = whatNotationColumn(oneGrupoAdy[i][1])+ whatNotationRow(oneGrupoAdy[i][0]);\n                            //Asignando destino\n                            destino =whatNotationColumn(posiblePositionToMove[1])+whatNotationRow(posiblePositionToMove[0]);\n                            System.out.println(\"Inicio:\"+oneGrupoAdy[i][0]+\" \"+oneGrupoAdy[0][1]);\n                            System.out.println(\"Destino:\"+posiblePositionToMove[0]+\" \"+posiblePositionToMove[1]);\n                            encontrado = true;\n                            String[] response = {inicio,destino};\n                            return response;\n                        }\n                    }\n                    break;\n                }\n            }\n            if (encontrado){\n                break;\n            }\n        }\n\n        //3) Tercera instancia\n        //Si no hay la posibilidad de que la computadora mueva una pieza\n        //para evitar un tres en raya del oponente humano\n        //Entonces por ahora moverá a un lugar random disponible.\n        if(inicio.equals(\"\")&&destino.equals(\"\")){\n\n            for (int [][] oneGrupoAdy:Constants.getAdjALasPiezas()) { //Recorriendo la matriz de adyacencia\n\n                // Verifica si hay un lugar disponible.\n                if(myTable[oneGrupoAdy[0][0]][oneGrupoAdy[0][1]].equals(\"0\")){\n                    //Verificando si sus adyacentes contienen piezas de tipo \"2\". (Es decir piezas de la computadora).\n                    for (int i = 1; i < oneGrupoAdy.length; i++) { //Recorriendo sus adyacentes\n                        if (myTable[oneGrupoAdy[i][0]][oneGrupoAdy[i][1]].equals(\"2\")){\n                            //Asignado inicio\n                            inicio = whatNotationColumn(oneGrupoAdy[i][1])+ whatNotationRow(oneGrupoAdy[i][0]);\n                            //Asignando destino\n                            destino =whatNotationColumn(oneGrupoAdy[0][1])+whatNotationRow(oneGrupoAdy[0][0]);\n                            System.out.println(\"Inicio:\"+oneGrupoAdy[i][0]+\" \"+oneGrupoAdy[0][1]);\n                            System.out.println(\"Destino:\"+oneGrupoAdy[0][0]+\" \"+oneGrupoAdy[0][1]);\n                            String[] response = {inicio,destino};\n                            return response;\n                        }\n                    }\n                    break;\n                }\n            }\n        }\n\n\n        String[] response = {inicio,destino};\n        return response;\n    }\n\n    public String optimalPositionToInsert(){\n        int[] posiblePositionToInsert = {-1,-1};\n        String destinoInsert = \"\";\n        String response1 = \"l\";\n        for (int[][] gPosTresR1:Constants.getCasesTresEnRaya()) {\n\n            int x, y, m, n, r, p; //(x,y), (m,n), (r,p) Grupo de tres en raya\n            x = gPosTresR1[0][0];\n            y = gPosTresR1[0][1];\n            m = gPosTresR1[1][0];\n            n = gPosTresR1[1][1];\n            r = gPosTresR1[2][0];\n            p = gPosTresR1[2][1];\n\n            if (myTable[x][y].equals(\"1\") && myTable[m][n].equals(\"1\") && myTable[r][p].equals(\"0\")) {\n                posiblePositionToInsert[0] = r;\n                posiblePositionToInsert[1] = p;\n                destinoInsert =whatNotationColumn(posiblePositionToInsert[1])+whatNotationRow(posiblePositionToInsert[0]);\n                response1 = destinoInsert;\n                return response1;\n            } if (myTable[x][y].equals(\"1\") && myTable[m][n].equals(\"0\") && myTable[r][p].equals(\"1\")) {\n                posiblePositionToInsert[0] = m;\n                posiblePositionToInsert[1] = n;\n                destinoInsert =whatNotationColumn(posiblePositionToInsert[1])+whatNotationRow(posiblePositionToInsert[0]);\n                response1 = destinoInsert;\n                return response1;\n            } if (myTable[x][y].equals(\"0\") && myTable[m][n].equals(\"1\") && myTable[r][p].equals(\"1\")) {\n                posiblePositionToInsert[0] = x;\n                posiblePositionToInsert[1] = y;\n                destinoInsert =whatNotationColumn(posiblePositionToInsert[1])+whatNotationRow(posiblePositionToInsert[0]);\n                response1 = destinoInsert;\n                return response1;\n            }\n\n        }\n\n        return response1;\n\n    }\n    public String optimalPositionToRemove() {\n        int[] posiblePositionToInsert = {-1, -1};\n        String destinoInsert = \"\";\n        String response1 = \"l\";\n        for (int[][] gPosTresR1 : Constants.getCasesTresEnRaya()) {\n\n            int x, y, m, n, r, p; //(x,y), (m,n), (r,p) Grupo de tres en raya\n            x = gPosTresR1[0][0];\n            y = gPosTresR1[0][1];\n            m = gPosTresR1[1][0];\n            n = gPosTresR1[1][1];\n            r = gPosTresR1[2][0];\n            p = gPosTresR1[2][1];\n\n            if (myTable[x][y].equals(\"1\") && myTable[m][n].equals(\"1\") && myTable[r][p].equals(\"0\")) {\n                posiblePositionToInsert[0] = x;\n                posiblePositionToInsert[1] = y;\n                destinoInsert = whatNotationColumn(posiblePositionToInsert[1]) + whatNotationRow(posiblePositionToInsert[0]);\n                response1 = destinoInsert;\n                return response1;\n            }\n            if (myTable[x][y].equals(\"1\") && myTable[m][n].equals(\"0\") && myTable[r][p].equals(\"1\")) {\n                posiblePositionToInsert[0] = r;\n                posiblePositionToInsert[1] = p;\n                destinoInsert = whatNotationColumn(posiblePositionToInsert[1]) + whatNotationRow(posiblePositionToInsert[0]);\n                response1 = destinoInsert;\n                return response1;\n            }\n            if (myTable[x][y].equals(\"0\") && myTable[m][n].equals(\"1\") && myTable[r][p].equals(\"1\")) {\n                posiblePositionToInsert[0] = m;\n                posiblePositionToInsert[1] = n;\n                destinoInsert = whatNotationColumn(posiblePositionToInsert[1]) + whatNotationRow(posiblePositionToInsert[0]);\n                response1 = destinoInsert;\n                return response1;\n            }\n\n        }\n\n        return response1;\n    }\n\n\n\n        public String optimalPositionToInsert2(){\n        int[] posiblePositionToInsert2 = {-1,-1};\n        String destinoInsert2 = \"\";\n        String response2 = \"l\";\n        for (int[][] gPosTresR1:Constants.getCasesTresEnRaya()) {\n\n            int x, y, m, n, r, p; //(x,y), (m,n), (r,p) Grupo de tres en raya\n            x = gPosTresR1[0][0];\n            y = gPosTresR1[0][1];\n            m = gPosTresR1[1][0];\n            n = gPosTresR1[1][1];\n            r = gPosTresR1[2][0];\n            p = gPosTresR1[2][1];\n\n            if (myTable[x][y].equals(\"2\") && myTable[m][n].equals(\"2\") && myTable[r][p].equals(\"0\")) {\n                posiblePositionToInsert2[0] = r;\n                posiblePositionToInsert2[1] = p;\n                destinoInsert2 =whatNotationColumn(posiblePositionToInsert2[1])+whatNotationRow(posiblePositionToInsert2[0]);\n                response2 = destinoInsert2;\n                return response2;\n            } if (myTable[x][y].equals(\"2\") && myTable[m][n].equals(\"0\") && myTable[r][p].equals(\"2\")) {\n                posiblePositionToInsert2[0] = m;\n                posiblePositionToInsert2[1] = n;\n                destinoInsert2 =whatNotationColumn(posiblePositionToInsert2[1])+whatNotationRow(posiblePositionToInsert2[0]);\n                response2 = destinoInsert2;\n                return response2;\n            } if (myTable[x][y].equals(\"0\") && myTable[m][n].equals(\"2\") && myTable[r][p].equals(\"2\")) {\n                posiblePositionToInsert2[0] = x;\n                posiblePositionToInsert2[1] = y;\n                destinoInsert2 =whatNotationColumn(posiblePositionToInsert2[1])+whatNotationRow(posiblePositionToInsert2[0]);\n                response2 = destinoInsert2;\n                return response2;\n            }\n\n        }\n\n        return response2;\n\n    }\n\n    //====================================================================\n\n    // obtener verificación si la casilla está vacía\n    public boolean getIsAvailableContentPiece(String positionPiece) {\n        int indexRow = whatIndexRow(positionPiece.charAt(1));\n        int indexColumn = whatIndexColumn(positionPiece.charAt(0));\n        if (availableBox[indexRow][indexColumn]) {\n            return true;\n        }\n        return false;\n    }\n\n    // establecer si la casilla esta vacia o llena\n    public void setAvailableContentPiece(String positionPiece, boolean available) {\n        int indexRow = whatIndexRow(positionPiece.charAt(1));\n        int indexColumn = whatIndexColumn(positionPiece.charAt(0));\n        availableBox[indexRow][indexColumn] = available;\n    }\n\n    public boolean validateMove(String positionPiece, String lastButton) {\n\n        int indexRow = whatIndexRow(lastButton.charAt(1));\n        int indexColumn = whatIndexColumn(lastButton.charAt(0));\n        int indexRow1 = whatIndexRow(positionPiece.charAt(1));\n        int indexColumn1 = whatIndexColumn(positionPiece.charAt(0));\n\n        //column\n        if (indexColumn == indexColumn1) {\n            //porAbajo\n            if (indexRow - indexRow1< 0) {\n                if (Math.abs(indexRow1 - indexRow) == 1) {\n                    return true;\n                }\n                if (Math.abs(indexRow1 - indexRow) == 2) {\n\n                    if (!availableBox[indexRow + 1][indexColumn] && myTable[indexRow+1][indexColumn] == \"0\") {\n                        return true;\n                    }\n                    return false;\n                }\n                if (Math.abs(indexRow1 - indexRow) == 3) {\n\n                    if (!availableBox[indexRow + 1][indexColumn] && !availableBox[indexRow + 2][indexColumn] &&\n                            myTable[indexRow + 1][indexColumn] == \"0\" && myTable[indexRow + 2][indexColumn] == \"0\") {\n                        return true;\n                    }\n                    return false;\n                }\n            }\n            //porArriba\n            if (indexRow - indexRow1 > 0) {\n                if (Math.abs(indexRow1 - indexRow) == 1) {\n                    return true;\n                }\n                if (Math.abs(indexRow1 - indexRow) == 2) {\n\n                    if (!availableBox[indexRow - 1][indexColumn] && myTable[indexRow+1][indexColumn] == \"0\") {\n                        return true;\n                    }\n                    return false;\n                }\n                if (Math.abs(indexRow1 - indexRow) == 3) {\n\n                    if (!availableBox[indexRow - 1][indexColumn] && !availableBox[indexRow - 2][indexColumn] &&\n                            myTable[indexRow - 1][indexColumn] == \"0\" && myTable[indexRow - 2][indexColumn] == \"0\") {\n                        return true;\n                    }\n                    return false;\n                }\n            }\n        }\n        //filas\n        if (indexRow == indexRow1) {\n            //a la derecha\n            if (indexColumn - indexColumn1 < 0) {\n                if (Math.abs(indexColumn1 - indexColumn) == 1) {\n                    return true;\n                }\n                if (Math.abs(indexColumn1 - indexColumn) == 2) {\n\n                    if (!availableBox[indexRow][indexColumn+1] && myTable[indexRow][indexColumn+1] == \"0\") {\n                        return true;\n                    }\n                    return false;\n                }\n                if (Math.abs(indexColumn1 - indexColumn) == 3) {\n\n                    if ((!availableBox[indexRow ][indexColumn+1] && !availableBox[indexRow][indexColumn+2]) &&\n                            (myTable[indexRow ][indexColumn+1] == \"0\" && myTable[indexRow][indexColumn+2] == \"0\")) {\n                        return true;\n                    }\n                    return false;\n                }\n            }\n            //a la izquierda\n            if (indexColumn - indexColumn1 > 0) {\n                if (Math.abs(indexColumn1 - indexColumn) == 1) {\n                    return true;\n                }\n                if (Math.abs(indexColumn1 - indexColumn) == 2) {\n\n                    if (!availableBox[indexRow ][indexColumn-1] && myTable[indexRow][indexColumn-1] == \"0\") {\n                        return true;\n                    }\n                    return false;\n                }\n                if (Math.abs(indexColumn1 - indexColumn) == 3) {\n\n                    if ((!availableBox[indexRow ][indexColumn - 1] && !availableBox[indexRow ][indexColumn - 2]) &&\n                            (myTable[indexRow ][indexColumn - 1] == \"0\" && myTable[indexRow ][indexColumn - 2] == \"0\")) {\n                        return true;\n                    }\n                    return false;\n                }\n            }\n        }\n        return false;\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Logic.java b/src/main/java/Logic.java
--- a/src/main/java/Logic.java	(revision bd869e5b434f90454b79fba160b232eea7cb3eb0)
+++ b/src/main/java/Logic.java	(date 1653710606450)
@@ -216,17 +216,14 @@
                             System.out.println("Inicio:"+oneGrupoAdy[i][0]+" "+oneGrupoAdy[0][1]);
                             System.out.println("Destino:"+posiblePositionToMove[0]+" "+posiblePositionToMove[1]);
                             System.out.println(inicio);
-                            encontrado = true;
+
                             String[] response = {inicio,destino};
                             return response;
                         }
                     }
-                    break;
                 }
             }
-            if (encontrado){
-                break;
-            }
+
         }
 
         //Reasignamos al valor original, para hacer una nueva búsqueda.
@@ -263,7 +260,6 @@
                 posiblePositionToMove[1] = y;
 
             }
-            boolean encontrado = false;
             //2)Buscando si la computadora tiene piezas adyacentes al posiblePositionToMove
             for (int [][] oneGrupoAdy:Constants.getAdjALasPiezas()) { //Recorriendo la matriz de adyacencia
                 // para cada contenedor de piezas.
@@ -277,16 +273,11 @@
                             destino =whatNotationColumn(posiblePositionToMove[1])+whatNotationRow(posiblePositionToMove[0]);
                             System.out.println("Inicio:"+oneGrupoAdy[i][0]+" "+oneGrupoAdy[0][1]);
                             System.out.println("Destino:"+posiblePositionToMove[0]+" "+posiblePositionToMove[1]);
-                            encontrado = true;
                             String[] response = {inicio,destino};
                             return response;
                         }
                     }
-                    break;
                 }
-            }
-            if (encontrado){
-                break;
             }
         }
 
@@ -298,22 +289,21 @@
 
             for (int [][] oneGrupoAdy:Constants.getAdjALasPiezas()) { //Recorriendo la matriz de adyacencia
 
-                // Verifica si hay un lugar disponible.
-                if(myTable[oneGrupoAdy[0][0]][oneGrupoAdy[0][1]].equals("0")){
-                    //Verificando si sus adyacentes contienen piezas de tipo "2". (Es decir piezas de la computadora).
+                //Busca una pieza de la computadora.
+                if(myTable[oneGrupoAdy[0][0]][oneGrupoAdy[0][1]].equals("2")){
+                    //Busca un adyacente vacío
                     for (int i = 1; i < oneGrupoAdy.length; i++) { //Recorriendo sus adyacentes
-                        if (myTable[oneGrupoAdy[i][0]][oneGrupoAdy[i][1]].equals("2")){
+                        if (myTable[oneGrupoAdy[i][0]][oneGrupoAdy[i][1]].equals("0")){
                             //Asignado inicio
-                            inicio = whatNotationColumn(oneGrupoAdy[i][1])+ whatNotationRow(oneGrupoAdy[i][0]);
+                            destino = whatNotationColumn(oneGrupoAdy[i][1])+ whatNotationRow(oneGrupoAdy[i][0]);
                             //Asignando destino
-                            destino =whatNotationColumn(oneGrupoAdy[0][1])+whatNotationRow(oneGrupoAdy[0][0]);
+                            inicio=whatNotationColumn(oneGrupoAdy[0][1])+whatNotationRow(oneGrupoAdy[0][0]);
                             System.out.println("Inicio:"+oneGrupoAdy[i][0]+" "+oneGrupoAdy[0][1]);
                             System.out.println("Destino:"+oneGrupoAdy[0][0]+" "+oneGrupoAdy[0][1]);
                             String[] response = {inicio,destino};
                             return response;
                         }
                     }
-                    break;
                 }
             }
         }
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"b44b8ef1-a58d-4369-9da8-edb636b1f71e\" name=\"Changes\" comment=\"\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/Logic.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/Logic.java\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"CodeStyleSettingsInfer\">\n    <option name=\"done\" value=\"true\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Class\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"MarkdownSettingsMigration\">\n    <option name=\"stateVersion\" value=\"1\" />\n  </component>\n  <component name=\"ProjectCodeStyleSettingsMigration\">\n    <option name=\"version\" value=\"2\" />\n  </component>\n  <component name=\"ProjectId\" id=\"29dCaFArQTeYvkpA6KAfg9EvHsk\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">{\n  &quot;keyToString&quot;: {\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\n    &quot;UI_DESIGNER_EDITOR_MODE.PaletteManager.SHOW&quot;: &quot;true&quot;,\n    &quot;UI_DESIGNER_EDITOR_MODE.UIDesignerToolWindowManager.SHOW&quot;: &quot;true&quot;,\n    &quot;UI_DESIGNER_EDITOR_MODE.UIDesignerToolWindowManager.WIDTH&quot;: &quot;177&quot;,\n    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/Usuario/Desktop/carpeta/Nine-men-s-morris-Grupo10&quot;\n  }\n}</component>\n  <component name=\"RunManager\">\n    <configuration name=\"Main\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"ALTERNATIVE_JRE_PATH\" value=\"openjdk-18\" />\n      <option name=\"ALTERNATIVE_JRE_PATH_ENABLED\" value=\"true\" />\n      <option name=\"MAIN_CLASS_NAME\" value=\"Main\" />\n      <module name=\"NIneGame\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"Application.Main\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"b44b8ef1-a58d-4369-9da8-edb636b1f71e\" name=\"Changes\" comment=\"\" />\n      <created>1653433654849</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1653433654849</updated>\n      <workItem from=\"1653689574905\" duration=\"12191000\" />\n    </task>\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision bd869e5b434f90454b79fba160b232eea7cb3eb0)
+++ b/.idea/workspace.xml	(date 1653711088691)
@@ -7,6 +7,7 @@
     <list default="true" id="b44b8ef1-a58d-4369-9da8-edb636b1f71e" name="Changes" comment="">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/Logic.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Logic.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/MainFrame.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/MainFrame.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
