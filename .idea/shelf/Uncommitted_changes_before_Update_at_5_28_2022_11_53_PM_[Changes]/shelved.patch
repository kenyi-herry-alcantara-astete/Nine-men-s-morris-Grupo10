Index: src/main/java/sprint2/Logic.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package sprint2;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class Logic {\r\n\r\n\r\n    // Orden de la matriz\r\n    private int n = 7;\r\n    // Matriz de casillas disponibles\r\n    protected boolean[][] availableBox = new boolean[n][n];\r\n    //Matriz tabla que muestra las jugadas en el tiempo\r\n    protected String[][] myTable = new String[n][n];\r\n\r\n    //CasesTresEnRaya\r\n    int[][][] CasesTresEnRaya = Constants.getCasesTresEnRaya();\r\n\r\n    //Matriz recuerdo\r\n    protected ArrayList<String> MenoryTreEnRaya = new ArrayList<String>();\r\n\r\n    public boolean isInTheMemory(String caseTresEnRaya){\r\n        boolean res = false;\r\n\r\n        for (String oneCase: MenoryTreEnRaya){\r\n            if(oneCase.equals(caseTresEnRaya)){\r\n                res = true;\r\n            }\r\n        }\r\n        return  res;\r\n\r\n    }\r\n\r\n    public void addToMemory(String caseTresEnRaya){\r\n        MenoryTreEnRaya.add(caseTresEnRaya);\r\n    }\r\n\r\n    public void removeOfTheMemory(String positionPiece){\r\n\r\n\r\n        int indexRow = whatIndexRow(positionPiece.charAt(1));\r\n        int indexColumn = whatIndexColumn(positionPiece.charAt(0));\r\n\r\n        String posititon = \"\"+indexRow+\"\"+indexColumn;\r\n        ArrayList <String> Temporary = new ArrayList<String>();\r\n\r\n        for ( String groupPosition:MenoryTreEnRaya) {\r\n           if (MenoryTreEnRaya.size() != 0){\r\n               String one = groupPosition.substring(0,2);\r\n               String two = groupPosition.substring(2,4);\r\n               String three = groupPosition.substring(4,6);\r\n               if (one.equals(posititon) || two.equals(posititon) || three.equals(posititon)) {\r\n                   Temporary.add(one+two+three);\r\n               }\r\n           }\r\n        }\r\n        for (String group:Temporary) {\r\n            MenoryTreEnRaya.remove(group);\r\n        }\r\n        //Elimnando Temporary\r\n        Temporary.clear();\r\n\r\n    }\r\n\r\n\r\n\r\n    public boolean isOneOfUnTresEnRaya(String positionPiece){\r\n\r\n        int indexRow = whatIndexRow(positionPiece.charAt(1));\r\n        int indexColumn = whatIndexColumn(positionPiece.charAt(0));\r\n\r\n        String position = Integer.toString(indexRow)+Integer.toString(indexColumn);\r\n\r\n        for ( String groupPosition:MenoryTreEnRaya) {\r\n            String one = groupPosition.substring(0,2);\r\n            String two = groupPosition.substring(2,4);\r\n            String three = groupPosition.substring(4,6);\r\n            if (one.equals(position) || two.equals(position) || three.equals(position)) return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    public Logic() {\r\n        fillInBoxes();\r\n        fillMyTable();\r\n    }\r\n\r\n    public void fillInBoxes() {\r\n        for (int i = 0; i < n; i++) {\r\n            for (int j = 0; j < n; j++) {\r\n                availableBox[i][j] = true;\r\n            }\r\n        }\r\n        for (int [] onePositionInvalid : Constants.getPositionInvalid()) {\r\n            availableBox[onePositionInvalid[0]][onePositionInvalid[1]] = false;\r\n        }\r\n    }\r\n\r\n    public void fillMyTable() {\r\n        for (int i = 0; i < n; i++) {\r\n            for (int j = 0; j < n; j++) {\r\n                myTable[i][j] = \"0\";\r\n            }\r\n        }\r\n    }\r\n\r\n    public void showMatrixTableInTHeConsole() {\r\n        System.out.println(\"--------------------------------\");\r\n\r\n        for (int i = 0; i < n; i++) {\r\n            for (int j = 0; j < n; j++) {\r\n                System.out.print(myTable[i][j] + \" \");\r\n            }\r\n            System.out.println();\r\n        }\r\n\r\n    }\r\n\r\n    //Recibe las notacions de la tabla GUI y retorna la position para la tabla logica.\r\n    public int whatIndexColumn(char notationColumn) {\r\n        return Character.getNumericValue(notationColumn) - 10;\r\n    }\r\n\r\n    public int whatIndexRow(char notationRow) {\r\n     return 7-Character.getNumericValue(notationRow);\r\n    }\r\n\r\n    //Recibe la postion de la tabla logica y retorna las notaciones de la tabla de la GUI.\r\n    public String whatNotationColumn(int indexColumn) {\r\n        return Constants.getLettersAndNumbersEquivalent(indexColumn);\r\n    }\r\n\r\n    public String whatNotationRow(int indexRow) {\r\n        return \"\"+(7-indexRow);\r\n    }\r\n\r\n\r\n    public void insertPiece(String positionPiece, String player1o2) {\r\n\r\n        int indexRow = whatIndexRow(positionPiece.charAt(1));\r\n        int indexColumn = whatIndexColumn(positionPiece.charAt(0));\r\n        if (myTable[indexRow][indexColumn].equals(\"0\")) {\r\n            myTable[indexRow][indexColumn] = player1o2;\r\n            showMatrixTableInTHeConsole();\r\n            availableBox[indexRow][indexColumn] = false;\r\n        }else{\r\n            System.out.println(\"Llegue aqui\");\r\n        }\r\n    }\r\n\r\n    public void removePiece(String positionPiece) {\r\n        int indexRow = whatIndexRow(positionPiece.charAt(1));\r\n        int indexColumn = whatIndexColumn(positionPiece.charAt(0));\r\n        myTable[indexRow][indexColumn] = \"0\";\r\n        showMatrixTableInTHeConsole();\r\n        //setAvailableContentPiece(positionPiece, true);\r\n    }\r\n\r\n\r\n    public void movePiece(String positionPieceToRemove) {\r\n        //RemovePiece\r\n        //SetNewPiece\r\n        setAvailableContentPiece(positionPieceToRemove, true);\r\n        removePiece(positionPieceToRemove);\r\n        //insertPiece(newPositionPiece,removePiece(positionPieceToRemove));\r\n    }\r\n\r\n    //Metodos utilizados por la computadora a la hora de mover una pieza\r\n\r\n    //Devuelve un par de positions de piezas optimos que la computadora debe mover\r\n    //[\"Inicio\",\"Destiono\"]\r\n    public String[] getOptimalPositionToMove(){\r\n        String inicio = \"\";\r\n        String destino = \"\";\r\n\r\n        int[] posiblePositionToMove = {-1,-1};\r\n\r\n        //1)Primera instancia\r\n        //Verificamos si hay un posible tres en raya del oponente humano\r\n        for (int[][] gPosTresR:Constants.getCasesTresEnRaya()) {\r\n\r\n            int x,y,m,n,r,p; //(x,y), (m,n), (r,p) Grupo de tres en raya\r\n            x = gPosTresR[0][0];\r\n            y = gPosTresR[0][1];\r\n            m = gPosTresR[1][0];\r\n            n = gPosTresR[1][1];\r\n            r = gPosTresR[2][0];\r\n            p = gPosTresR[2][1];\r\n\r\n            //Verificando para el oponente humano, posibles tres en raya futuros\r\n            //Entonces la computadora tratará de mover al lugar con valor \"0\"\r\n            //de dicho posible tres en raya futuro.\r\n\r\n            //1)Buscamos el lugar que tendrá que mover la computadora para evitar el\r\n            //tres en raya del oponente humano\r\n\r\n            if (myTable[x][y].equals(\"1\") && myTable[m][n].equals(\"1\") && myTable[r][p].equals(\"0\")){\r\n                posiblePositionToMove[0] = r;\r\n                posiblePositionToMove[1] = p;\r\n            }else if (myTable[x][y].equals(\"1\") && myTable[m][n].equals(\"0\") && myTable[r][p].equals(\"1\")){\r\n                posiblePositionToMove[0] = m;\r\n                posiblePositionToMove[1] = n;\r\n            }else if (myTable[x][y].equals(\"0\") && myTable[m][n].equals(\"1\") && myTable[r][p].equals(\"1\")){\r\n                posiblePositionToMove[0] = x;\r\n                posiblePositionToMove[1] = y;\r\n\r\n            }\r\n            boolean encontrado = false;\r\n            //2)Buscando si la computadora tiene piezas adyacentes al posiblePositionToMove\r\n            for (int [][] oneGrupoAdy:Constants.getAdjALasPiezas()) { //Recorriendo la matriz de adyacencia\r\n                // para cada contenedor de piezas.\r\n                if(oneGrupoAdy[0][0] == posiblePositionToMove[0] && oneGrupoAdy[0][1] == posiblePositionToMove[1]){\r\n                    //Verificando si sus adyacentes contienen piezas de tipo \"2\". (Es decir piezas de la computadora).\r\n                    for (int i = 1; i < oneGrupoAdy.length; i++) { //Recorriendo sus adyacentes\r\n                        if (myTable[oneGrupoAdy[i][0]][oneGrupoAdy[i][1]].equals(\"2\")){\r\n                            //Asignado inicio\r\n                            inicio = whatNotationColumn(oneGrupoAdy[i][1])+ whatNotationRow(oneGrupoAdy[i][0]);\r\n                            //Asignando destino\r\n                            destino =whatNotationColumn(posiblePositionToMove[1])+whatNotationRow(posiblePositionToMove[0]);\r\n                            System.out.println(\"Inicio:\"+oneGrupoAdy[i][0]+\" \"+oneGrupoAdy[0][1]);\r\n                            System.out.println(\"Destino:\"+posiblePositionToMove[0]+\" \"+posiblePositionToMove[1]);\r\n                            System.out.println(inicio);\r\n\r\n                            String[] response = {inicio,destino};\r\n                            return response;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        //Reasignamos al valor original, para hacer una nueva búsqueda.\r\n        posiblePositionToMove[0] = -1; //\r\n        posiblePositionToMove[1] = -1; //\r\n        //2)Instancia\r\n        //Que la computadora busque formar un tres en raya\r\n\r\n        for (int[][] gPosTresR:Constants.getCasesTresEnRaya()) {\r\n\r\n            int x,y,m,n,r,p; //(x,y), (m,n), (r,p) Grupo de tres en raya\r\n            x = gPosTresR[0][0];\r\n            y = gPosTresR[0][1];\r\n            m = gPosTresR[1][0];\r\n            n = gPosTresR[1][1];\r\n            r = gPosTresR[2][0];\r\n            p = gPosTresR[2][1];\r\n\r\n            //Verificando si puede formar un posible tres en raya.\r\n            //Entonces la computadora tratará de mover al lugar con valor \"0\"\r\n            //para completar el tres en raya\r\n\r\n            //1)Buscamos el lugar que tendrá que mover la computadora para formar el\r\n            //tres en raya\r\n\r\n            if (myTable[x][y].equals(\"2\") && myTable[m][n].equals(\"2\") && myTable[r][p].equals(\"0\")){\r\n                posiblePositionToMove[0] = r;\r\n                posiblePositionToMove[1] = p;\r\n            }else if (myTable[x][y].equals(\"2\") && myTable[m][n].equals(\"0\") && myTable[r][p].equals(\"2\")){\r\n                posiblePositionToMove[0] = m;\r\n                posiblePositionToMove[1] = n;\r\n            }else if (myTable[x][y].equals(\"0\") && myTable[m][n].equals(\"2\") && myTable[r][p].equals(\"2\")){\r\n                posiblePositionToMove[0] = x;\r\n                posiblePositionToMove[1] = y;\r\n\r\n            }\r\n            //2)Buscando si la computadora tiene piezas adyacentes al posiblePositionToMove\r\n            for (int [][] oneGrupoAdy:Constants.getAdjALasPiezas()) { //Recorriendo la matriz de adyacencia\r\n                // para cada contenedor de piezas.\r\n                if(oneGrupoAdy[0][0] == posiblePositionToMove[0] && oneGrupoAdy[0][1] == posiblePositionToMove[1]){\r\n                    //Verificando si sus adyacentes contienen piezas de tipo \"2\". (Es decir piezas de la computadora).\r\n                    for (int i = 1; i < oneGrupoAdy.length; i++) { //Recorriendo sus adyacentes\r\n                        if (myTable[oneGrupoAdy[i][0]][oneGrupoAdy[i][1]].equals(\"2\")){\r\n                            //Asignado inicio\r\n                            inicio = whatNotationColumn(oneGrupoAdy[i][1])+ whatNotationRow(oneGrupoAdy[i][0]);\r\n                            //Asignando destino\r\n                            destino =whatNotationColumn(posiblePositionToMove[1])+whatNotationRow(posiblePositionToMove[0]);\r\n                            System.out.println(\"Inicio:\"+oneGrupoAdy[i][0]+\" \"+oneGrupoAdy[0][1]);\r\n                            System.out.println(\"Destino:\"+posiblePositionToMove[0]+\" \"+posiblePositionToMove[1]);\r\n                            String[] response = {inicio,destino};\r\n                            return response;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        //3) Tercera instancia\r\n        //Si no hay la posibilidad de que la computadora mueva una pieza\r\n        //para evitar un tres en raya del oponente humano\r\n        //Entonces por ahora moverá a un lugar random disponible.\r\n        if(inicio.equals(\"\")&&destino.equals(\"\")){\r\n\r\n            for (int [][] oneGrupoAdy:Constants.getAdjALasPiezas()) { //Recorriendo la matriz de adyacencia\r\n\r\n                //Busca una pieza de la computadora.\r\n                if(myTable[oneGrupoAdy[0][0]][oneGrupoAdy[0][1]].equals(\"2\")){\r\n                    //Busca un adyacente vacío\r\n                    for (int i = 1; i < oneGrupoAdy.length; i++) { //Recorriendo sus adyacentes\r\n                        if (myTable[oneGrupoAdy[i][0]][oneGrupoAdy[i][1]].equals(\"0\")){\r\n                            //Asignado inicio\r\n                            destino = whatNotationColumn(oneGrupoAdy[i][1])+ whatNotationRow(oneGrupoAdy[i][0]);\r\n                            //Asignando destino\r\n                            inicio=whatNotationColumn(oneGrupoAdy[0][1])+whatNotationRow(oneGrupoAdy[0][0]);\r\n                            System.out.println(\"Inicio:\"+oneGrupoAdy[i][0]+\" \"+oneGrupoAdy[0][1]);\r\n                            System.out.println(\"Destino:\"+oneGrupoAdy[0][0]+\" \"+oneGrupoAdy[0][1]);\r\n                            String[] response = {inicio,destino};\r\n                            return response;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        String[] response = {inicio,destino};\r\n        return response;\r\n    }\r\n\r\n    public String optimalPositionToInsert(){\r\n        int[] posiblePositionToInsert = {-1,-1};\r\n        String destinoInsert = \"\";\r\n        String response1 = \"l\";\r\n        for (int[][] gPosTresR1:Constants.getCasesTresEnRaya()) {\r\n\r\n            int x, y, m, n, r, p; //(x,y), (m,n), (r,p) Grupo de tres en raya\r\n            x = gPosTresR1[0][0];\r\n            y = gPosTresR1[0][1];\r\n            m = gPosTresR1[1][0];\r\n            n = gPosTresR1[1][1];\r\n            r = gPosTresR1[2][0];\r\n            p = gPosTresR1[2][1];\r\n\r\n            if (myTable[x][y].equals(\"1\") && myTable[m][n].equals(\"1\") && myTable[r][p].equals(\"0\")) {\r\n                posiblePositionToInsert[0] = r;\r\n                posiblePositionToInsert[1] = p;\r\n                destinoInsert =whatNotationColumn(posiblePositionToInsert[1])+whatNotationRow(posiblePositionToInsert[0]);\r\n                response1 = destinoInsert;\r\n                return response1;\r\n            } if (myTable[x][y].equals(\"1\") && myTable[m][n].equals(\"0\") && myTable[r][p].equals(\"1\")) {\r\n                posiblePositionToInsert[0] = m;\r\n                posiblePositionToInsert[1] = n;\r\n                destinoInsert =whatNotationColumn(posiblePositionToInsert[1])+whatNotationRow(posiblePositionToInsert[0]);\r\n                response1 = destinoInsert;\r\n                return response1;\r\n            } if (myTable[x][y].equals(\"0\") && myTable[m][n].equals(\"1\") && myTable[r][p].equals(\"1\")) {\r\n                posiblePositionToInsert[0] = x;\r\n                posiblePositionToInsert[1] = y;\r\n                destinoInsert =whatNotationColumn(posiblePositionToInsert[1])+whatNotationRow(posiblePositionToInsert[0]);\r\n                response1 = destinoInsert;\r\n                return response1;\r\n            }\r\n\r\n        }\r\n\r\n        return response1;\r\n\r\n    }\r\n    public String optimalPositionToRemove() {\r\n        int[] posiblePositionToInsert = {-1, -1};\r\n        String destinoInsert = \"\";\r\n        String response1 = \"l\";\r\n        for (int[][] gPosTresR1 : Constants.getCasesTresEnRaya()) {\r\n\r\n            int x, y, m, n, r, p; //(x,y), (m,n), (r,p) Grupo de tres en raya\r\n            x = gPosTresR1[0][0];\r\n            y = gPosTresR1[0][1];\r\n            m = gPosTresR1[1][0];\r\n            n = gPosTresR1[1][1];\r\n            r = gPosTresR1[2][0];\r\n            p = gPosTresR1[2][1];\r\n\r\n            if (myTable[x][y].equals(\"1\") && myTable[m][n].equals(\"1\") && myTable[r][p].equals(\"0\")) {\r\n                posiblePositionToInsert[0] = x;\r\n                posiblePositionToInsert[1] = y;\r\n                destinoInsert = whatNotationColumn(posiblePositionToInsert[1]) + whatNotationRow(posiblePositionToInsert[0]);\r\n                response1 = destinoInsert;\r\n                return response1;\r\n            }\r\n            if (myTable[x][y].equals(\"1\") && myTable[m][n].equals(\"0\") && myTable[r][p].equals(\"1\")) {\r\n                posiblePositionToInsert[0] = r;\r\n                posiblePositionToInsert[1] = p;\r\n                destinoInsert = whatNotationColumn(posiblePositionToInsert[1]) + whatNotationRow(posiblePositionToInsert[0]);\r\n                response1 = destinoInsert;\r\n                return response1;\r\n            }\r\n            if (myTable[x][y].equals(\"0\") && myTable[m][n].equals(\"1\") && myTable[r][p].equals(\"1\")) {\r\n                posiblePositionToInsert[0] = m;\r\n                posiblePositionToInsert[1] = n;\r\n                destinoInsert = whatNotationColumn(posiblePositionToInsert[1]) + whatNotationRow(posiblePositionToInsert[0]);\r\n                response1 = destinoInsert;\r\n                return response1;\r\n            }\r\n\r\n        }\r\n\r\n        return response1;\r\n    }\r\n\r\n\r\n\r\n        public String optimalPositionToInsert2(){\r\n        int[] posiblePositionToInsert2 = {-1,-1};\r\n        String destinoInsert2 = \"\";\r\n        String response2 = \"l\";\r\n        for (int[][] gPosTresR1:Constants.getCasesTresEnRaya()) {\r\n\r\n            int x, y, m, n, r, p; //(x,y), (m,n), (r,p) Grupo de tres en raya\r\n            x = gPosTresR1[0][0];\r\n            y = gPosTresR1[0][1];\r\n            m = gPosTresR1[1][0];\r\n            n = gPosTresR1[1][1];\r\n            r = gPosTresR1[2][0];\r\n            p = gPosTresR1[2][1];\r\n\r\n            if (myTable[x][y].equals(\"2\") && myTable[m][n].equals(\"2\") && myTable[r][p].equals(\"0\")) {\r\n                posiblePositionToInsert2[0] = r;\r\n                posiblePositionToInsert2[1] = p;\r\n                destinoInsert2 =whatNotationColumn(posiblePositionToInsert2[1])+whatNotationRow(posiblePositionToInsert2[0]);\r\n                response2 = destinoInsert2;\r\n                return response2;\r\n            } if (myTable[x][y].equals(\"2\") && myTable[m][n].equals(\"0\") && myTable[r][p].equals(\"2\")) {\r\n                posiblePositionToInsert2[0] = m;\r\n                posiblePositionToInsert2[1] = n;\r\n                destinoInsert2 =whatNotationColumn(posiblePositionToInsert2[1])+whatNotationRow(posiblePositionToInsert2[0]);\r\n                response2 = destinoInsert2;\r\n                return response2;\r\n            } if (myTable[x][y].equals(\"0\") && myTable[m][n].equals(\"2\") && myTable[r][p].equals(\"2\")) {\r\n                posiblePositionToInsert2[0] = x;\r\n                posiblePositionToInsert2[1] = y;\r\n                destinoInsert2 =whatNotationColumn(posiblePositionToInsert2[1])+whatNotationRow(posiblePositionToInsert2[0]);\r\n                response2 = destinoInsert2;\r\n                return response2;\r\n            }\r\n\r\n        }\r\n\r\n        return response2;\r\n\r\n    }\r\n\r\n    //====================================================================\r\n\r\n    // obtener verificación si la casilla está vacía\r\n    public boolean getIsAvailableContentPiece(String positionPiece) {\r\n        int indexRow = whatIndexRow(positionPiece.charAt(1));\r\n        int indexColumn = whatIndexColumn(positionPiece.charAt(0));\r\n        if (availableBox[indexRow][indexColumn]) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // establecer si la casilla esta vacia o llena\r\n    public void setAvailableContentPiece(String positionPiece, boolean available) {\r\n        int indexRow = whatIndexRow(positionPiece.charAt(1));\r\n        int indexColumn = whatIndexColumn(positionPiece.charAt(0));\r\n        availableBox[indexRow][indexColumn] = available;\r\n    }\r\n\r\n    public boolean validateMove(String positionPiece, String lastButton) {\r\n\r\n        int indexRow = whatIndexRow(lastButton.charAt(1));\r\n        int indexColumn = whatIndexColumn(lastButton.charAt(0));\r\n        int indexRow1 = whatIndexRow(positionPiece.charAt(1));\r\n        int indexColumn1 = whatIndexColumn(positionPiece.charAt(0));\r\n\r\n        //column\r\n        if (indexColumn == indexColumn1) {\r\n            //porAbajo\r\n            if (indexRow - indexRow1< 0) {\r\n                if (Math.abs(indexRow1 - indexRow) == 1) {\r\n                    return true;\r\n                }\r\n                if (Math.abs(indexRow1 - indexRow) == 2) {\r\n\r\n                    if (!availableBox[indexRow + 1][indexColumn] && myTable[indexRow+1][indexColumn] == \"0\") {\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                }\r\n                if (Math.abs(indexRow1 - indexRow) == 3) {\r\n\r\n                    if (!availableBox[indexRow + 1][indexColumn] && !availableBox[indexRow + 2][indexColumn] &&\r\n                            myTable[indexRow + 1][indexColumn] == \"0\" && myTable[indexRow + 2][indexColumn] == \"0\") {\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                }\r\n            }\r\n            //porArriba\r\n            if (indexRow - indexRow1 > 0) {\r\n                if (Math.abs(indexRow1 - indexRow) == 1) {\r\n                    return true;\r\n                }\r\n                if (Math.abs(indexRow1 - indexRow) == 2) {\r\n\r\n                    if (!availableBox[indexRow - 1][indexColumn] && myTable[indexRow+1][indexColumn] == \"0\") {\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                }\r\n                if (Math.abs(indexRow1 - indexRow) == 3) {\r\n\r\n                    if (!availableBox[indexRow - 1][indexColumn] && !availableBox[indexRow - 2][indexColumn] &&\r\n                            myTable[indexRow - 1][indexColumn] == \"0\" && myTable[indexRow - 2][indexColumn] == \"0\") {\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        //filas\r\n        if (indexRow == indexRow1) {\r\n            //a la derecha\r\n            if (indexColumn - indexColumn1 < 0) {\r\n                if (Math.abs(indexColumn1 - indexColumn) == 1) {\r\n                    return true;\r\n                }\r\n                if (Math.abs(indexColumn1 - indexColumn) == 2) {\r\n\r\n                    if (!availableBox[indexRow][indexColumn+1] && myTable[indexRow][indexColumn+1] == \"0\") {\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                }\r\n                if (Math.abs(indexColumn1 - indexColumn) == 3) {\r\n\r\n                    if ((!availableBox[indexRow ][indexColumn+1] && !availableBox[indexRow][indexColumn+2]) &&\r\n                            (myTable[indexRow ][indexColumn+1] == \"0\" && myTable[indexRow][indexColumn+2] == \"0\")) {\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                }\r\n            }\r\n            //a la izquierda\r\n            if (indexColumn - indexColumn1 > 0) {\r\n                if (Math.abs(indexColumn1 - indexColumn) == 1) {\r\n                    return true;\r\n                }\r\n                if (Math.abs(indexColumn1 - indexColumn) == 2) {\r\n\r\n                    if (!availableBox[indexRow ][indexColumn-1] && myTable[indexRow][indexColumn-1] == \"0\") {\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                }\r\n                if (Math.abs(indexColumn1 - indexColumn) == 3) {\r\n\r\n                    if ((!availableBox[indexRow ][indexColumn - 1] && !availableBox[indexRow ][indexColumn - 2]) &&\r\n                            (myTable[indexRow ][indexColumn - 1] == \"0\" && myTable[indexRow ][indexColumn - 2] == \"0\")) {\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/sprint2/Logic.java b/src/main/java/sprint2/Logic.java
--- a/src/main/java/sprint2/Logic.java	
+++ b/src/main/java/sprint2/Logic.java	
@@ -445,7 +445,7 @@
     public boolean getIsAvailableContentPiece(String positionPiece) {
         int indexRow = whatIndexRow(positionPiece.charAt(1));
         int indexColumn = whatIndexColumn(positionPiece.charAt(0));
-        if (availableBox[indexRow][indexColumn]) {
+        if (myTable[indexRow][indexColumn]=="0") {
             return true;
         }
         return false;
Index: src/main/java/sprint2/MainFrame.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package sprint2;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.io.IOException;\r\nimport java.net.URI;\r\nimport java.net.URISyntaxException;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.util.logging.Level;\r\nimport java.util.logging.Logger;\r\n\r\n\r\npublic class MainFrame extends JFrame {\r\n\r\n\r\n    public Player player1 = new Player();\r\n    public Player player2 = new Player();\r\n\r\n    public boolean isPlayerAComputer = false; //Estado si se esta jugando con la computadora\r\n    public String modeDifficulty = \"\"; //Nivel de la computadora : basic | estandar | expert\r\n\r\n    public Logic currentLogicGame = new Logic();\r\n\r\n    ImageIcon IconWithPiece1 = new ImageIcon(\"src/main/resources/Image/IconWithPiece1.png\");\r\n    ImageIcon IconWithPiece2 = new ImageIcon(\"src/main/resources/Image/IconWithPiece2.png\");\r\n    ImageIcon IconContentEmpty = new ImageIcon(\"src/main/resources/Image/IconContentPiece.png\");\r\n    ImageIcon IconMove = new ImageIcon(\"src/main/resources/Image/AvailableContent.png\");\r\n\r\n    private JPanel PanelPrincipal;\r\n    private JPanel CenterPanel;\r\n    private JButton a7;\r\n    private JButton d7;\r\n    private JButton g7;\r\n    private JButton b6;\r\n    private JButton d6;\r\n    private JButton f6;\r\n    private JButton c5;\r\n    private JButton d5;\r\n    private JButton e5;\r\n    private JButton a4;\r\n    private JButton b4;\r\n    private JButton c4;\r\n    private JButton e4;\r\n    private JButton f4;\r\n    private JButton g4;\r\n    private JButton c3;\r\n    private JButton d3;\r\n    private JButton e3;\r\n    private JButton b2;\r\n    private JButton d2;\r\n    private JButton f2;\r\n    private JButton a1;\r\n    private JButton d1;\r\n    private JButton g1;\r\n\r\n    private JButton[] allBtn = {a7, d7, g7, b6, d6, f6, c5, d5, e5, a4, b4, c4, e4, f4, g4, c3, d3, e3, b2, d2, f2, a1, d1, g1};\r\n    private JButton pieceLeft1;\r\n    private JButton pieceLeft2;\r\n    private JButton pieceLeft3;\r\n    private JButton pieceLeft4;\r\n    private JButton pieceLeft5;\r\n    private JButton pieceLeft6;\r\n    private JButton pieceLeft7;\r\n    private JButton pieceLeft8;\r\n    private JButton pieceLeft9;\r\n    private JButton pieceRight1;\r\n    private JButton pieceRight2;\r\n    private JButton pieceRight3;\r\n    private JButton pieceRight4;\r\n    private JButton pieceRight5;\r\n    private JButton pieceRight6;\r\n    private JButton pieceRight7;\r\n    private JButton pieceRight8;\r\n    private JButton pieceRight9;\r\n\r\n\r\n    private JButton[] pieceLeft = {pieceLeft1, pieceLeft2, pieceLeft3, pieceLeft4, pieceLeft5, pieceLeft6, pieceLeft7, pieceLeft8, pieceLeft9};\r\n    private JButton[] pieceRight = {pieceRight1, pieceRight2, pieceRight3, pieceRight4, pieceRight5, pieceRight6, pieceRight7, pieceRight8, pieceRight9};\r\n    JLabel namePlayerLeft;\r\n    JLabel namePlayerRight;\r\n    private JLabel showIUResult;\r\n\r\n\r\n    //Show the turn\r\n    public void showTurnInUI() {\r\n        if (player1.turn.equals(\"uno\")) {\r\n            if (namePlayerLeft.getText().equals(player1.name)) {\r\n                namePlayerLeft.setBackground(new Color(94, 0, 215));\r\n                namePlayerRight.setBackground(new Color(32, 36, 74));\r\n            } else {\r\n                namePlayerRight.setBackground(new Color(94, 0, 215));\r\n                namePlayerLeft.setBackground(new Color(32, 36, 74));\r\n            }\r\n        }\r\n\r\n        if (player2.turn.equals(\"uno\")) {\r\n            if (namePlayerRight.getText().equals(player2.name)) {\r\n                namePlayerRight.setBackground(new Color(94, 0, 215));\r\n                namePlayerLeft.setBackground(new Color(32, 36, 74));\r\n            } else {\r\n                namePlayerLeft.setBackground(new Color(94, 0, 215));\r\n                namePlayerRight.setBackground(new Color(32, 36, 74));\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    //Change turn\r\n    public void changeTurn() {\r\n        String aux = player1.turn;\r\n        player1.turn = player2.turn;\r\n        player2.turn = aux;\r\n        showTurnInUI();\r\n\r\n    }\r\n\r\n    public int numberPiecesLeft = 9;\r\n    public int numberPiecesRight = 9;\r\n\r\n    private JButton lastButton;\r\n    public int numberMove = 0;\r\n\r\n    // insetPieceToUI\r\n    public void insertPieceToUI(JButton contentPiece) {\r\n        if (currentLogicGame.getIsAvailableContentPiece(contentPiece.getText())) {\r\n            if (numberPiecesLeft != 0 || numberPiecesRight != 0) {\r\n                if (player1.turn == \"uno\") {\r\n                    contentPiece.setIcon(IconWithPiece1);\r\n                    pieceLeft[9 - numberPiecesLeft].setIcon(IconContentEmpty);\r\n                    numberPiecesLeft--;\r\n                    currentLogicGame.insertPiece(contentPiece.getText(), \"1\");\r\n\r\n                } else {\r\n                    contentPiece.setIcon(IconWithPiece2);\r\n                    pieceRight[9 - numberPiecesRight].setIcon(IconContentEmpty);\r\n                    numberPiecesRight--;\r\n                    currentLogicGame.insertPiece(contentPiece.getText(), \"2\");\r\n                }\r\n                changeTurn();\r\n            } else {\r\n                System.out.println(\"Todas las piezas insertadas\");\r\n            }\r\n            currentLogicGame.setAvailableContentPiece(contentPiece.getText(), false);\r\n        }\r\n    }\r\n\r\n    int pushKeybord = 0;\r\n\r\n\r\n    //\r\n    public void setNameInTheUI() {\r\n        namePlayerLeft.setText(player1.name);\r\n        namePlayerRight.setText(player2.name);\r\n    }\r\n\r\n    //mover pieza\r\n    public void movePieceToUI(JButton myMoveContentPiece) {\r\n\r\n        if (player1.turn == \"uno\") {\r\n\r\n            if (numberPiecesLeft == 0 && numberPiecesRight == 0 && myMoveContentPiece.getIcon() == IconWithPiece1 && numberMove == 0 && player1.numberPieces > 3) {\r\n\r\n                lastButton = myMoveContentPiece;\r\n                myMoveContentPiece.setIcon(IconMove);\r\n                numberMove++;\r\n                System.out.println(numberMove);\r\n            }\r\n        }\r\n        if (player2.turn == \"uno\") {\r\n\r\n            if (numberPiecesLeft == 0 && numberPiecesRight == 0 && myMoveContentPiece.getIcon() == IconWithPiece2 && numberMove == 0 && player2.numberPieces > 3) {\r\n\r\n                lastButton = myMoveContentPiece;\r\n                myMoveContentPiece.setIcon(IconMove);\r\n                numberMove++;\r\n                pushKeybord++;\r\n                System.out.println(numberMove);\r\n            }\r\n        }\r\n\r\n        if (numberMove == 1 && currentLogicGame.getIsAvailableContentPiece(myMoveContentPiece.getText())) {\r\n            if (currentLogicGame.validateMove(myMoveContentPiece.getText(), lastButton.getText())) {\r\n                if (currentLogicGame.getIsAvailableContentPiece(myMoveContentPiece.getText())) {\r\n                    if (player1.turn == \"uno\") {\r\n                        System.out.println(numberMove);\r\n                        numberPiecesLeft++;\r\n                        currentLogicGame.movePiece(lastButton.getText());\r\n                        lastButton.setIcon(IconContentEmpty);\r\n                    } else {\r\n                        System.out.println(numberMove);\r\n                        numberPiecesRight++;\r\n                        currentLogicGame.movePiece(lastButton.getText());\r\n                        lastButton.setIcon(IconContentEmpty);\r\n                    }\r\n                    numberMove--;\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    public void volarPieza(JButton myMoveContentPiece) {\r\n        System.out.println(\"contando\" + player1.numberPieces);\r\n        if (player1.turn == \"uno\") {\r\n\r\n            if (numberPiecesLeft == 0 && numberPiecesRight == 0 && myMoveContentPiece.getIcon() == IconWithPiece1 && numberMove == 0 && player1.numberPieces <= 3) {\r\n\r\n                lastButton = myMoveContentPiece;\r\n                myMoveContentPiece.setIcon(IconMove);\r\n                numberMove++;\r\n                System.out.println(numberMove);\r\n            }\r\n        }\r\n        if (player2.turn == \"uno\") {\r\n\r\n            if (numberPiecesLeft == 0 && numberPiecesRight == 0 && myMoveContentPiece.getIcon() == IconWithPiece2 && numberMove == 0 && player2.numberPieces <= 3) {\r\n\r\n                lastButton = myMoveContentPiece;\r\n                myMoveContentPiece.setIcon(IconMove);\r\n                numberMove++;\r\n                pushKeybord++;\r\n                System.out.println(numberMove);\r\n            }\r\n        }\r\n        if (numberMove == 1 && currentLogicGame.getIsAvailableContentPiece(myMoveContentPiece.getText()) && (player2.numberPieces <= 3 || player1.numberPieces <= 3)) {\r\n\r\n            if (currentLogicGame.getIsAvailableContentPiece(myMoveContentPiece.getText())) {\r\n                if (player1.turn == \"uno\") {\r\n                    System.out.println(numberMove);\r\n                    numberPiecesLeft++;\r\n                    currentLogicGame.movePiece(lastButton.getText());\r\n                    lastButton.setIcon(IconContentEmpty);\r\n                } else {\r\n                    System.out.println(numberMove);\r\n                    numberPiecesRight++;\r\n                    currentLogicGame.movePiece(lastButton.getText());\r\n                    lastButton.setIcon(IconContentEmpty);\r\n                }\r\n                numberMove--;\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    //Remove Opponent's pieces\r\n    public void removeOpponentsPiecesOfUI(JButton myContentPieceToRemove) {\r\n\r\n        if (myContentPieceToRemove.getIcon() == IconWithPiece1) {\r\n            myContentPieceToRemove.setIcon(IconContentEmpty);\r\n            currentLogicGame.removePiece(myContentPieceToRemove.getText());\r\n            player1.numberPieces--;\r\n        }\r\n\r\n        if (myContentPieceToRemove.getIcon() == IconWithPiece2) {\r\n            myContentPieceToRemove.setIcon(IconContentEmpty);\r\n            currentLogicGame.removePiece(myContentPieceToRemove.getText());\r\n            player2.numberPieces--;\r\n        }\r\n\r\n        //Verificando si la pieza eliminada pertenecia a un tres en raya\r\n        if (currentLogicGame.isOneOfUnTresEnRaya(myContentPieceToRemove.getText())) {\r\n            //Removing of the memory\r\n            currentLogicGame.removeOfTheMemory(myContentPieceToRemove.getText());\r\n        }\r\n\r\n        if (player1.numberPieces <= 2) {\r\n            player2.victories += 1;\r\n            WindowWinner windowWinner = new WindowWinner(this, true, player2.name);\r\n            windowWinner.setVisible(true);\r\n            restart();\r\n        }\r\n        if (player2.numberPieces <= 2) {\r\n            player1.victories += 1;\r\n            WindowWinner windowWinner = new WindowWinner(this, true, player1.name);\r\n            windowWinner.pack();\r\n            windowWinner.setVisible(true);\r\n            restart();\r\n        }\r\n\r\n        changeTurn();\r\n    }\r\n\r\n\r\n\r\n    //Action Player at the time\r\n    boolean existTicTacToe = false;\r\n\r\n    public void actionPlayerAtTheTime(JButton currentButtonAction) {\r\n\r\n        movePieceToUI(currentButtonAction);\r\n\r\n        volarPieza(currentButtonAction);\r\n\r\n        if (!existTicTacToe) {\r\n            if ((numberPiecesLeft != 0 || numberPiecesRight != 0) && (currentLogicGame.getIsAvailableContentPiece(currentButtonAction.getText()))) {\r\n                showIUResult.setText(\"\");\r\n\r\n                insertPieceToUI(currentButtonAction);\r\n\r\n                if (player1.turn == \"dos\") {\r\n                    existTicTacToe = scoreThreeInARow(\"1\");\r\n                    if (existTicTacToe) {\r\n                        // Mostrando alerta de tres en raya\r\n                        showIUResult.setText(\"Tres en raya para el jugador 1\");\r\n                        //Regresando el tunos, para que jueue nuevamente\r\n                        changeTurn();\r\n                    }\r\n                } else {\r\n                    if (player2.turn == \"dos\") {\r\n                        existTicTacToe = scoreThreeInARow(\"2\");\r\n                        if (existTicTacToe) {\r\n                            // Mostrando alerta de tres en raya\r\n                            showIUResult.setText(\"Tres en raya para el jugador 2\");\r\n                            //Regresando el tunos, para que jueue nuevamente\r\n                            changeTurn();\r\n                        }\r\n                    }\r\n                }\r\n\r\n            }\r\n        } else {\r\n            removeOpponentsPiecesOfUI(currentButtonAction);\r\n            existTicTacToe = false;\r\n            showIUResult.setText(\"\");\r\n            currentLogicGame.setAvailableContentPiece(currentButtonAction.getText(), true);\r\n        }\r\n\r\n        //Siempre entra a este método, pero en el método se pregunta si\r\n        //la computadora puede mover o no. De lo contrario deja sin efecto.\r\n        if (isPlayerAComputer) {\r\n            actionComputer();\r\n        }\r\n    }\r\n\r\n    public void actionComputer() {\r\n        insertPieceByComputer();\r\n        movePieceByTheComputer();\r\n        scoreThreeInARowComputer();\r\n    }\r\n\r\n    //Moviendo pieza por la computadora\r\n    public void movePieceByTheComputer() {\r\n        //Preguntando si la computadora es el oponente y esta de turno\r\n        if (isPlayerAComputer && player2.turn == \"uno\" && numberPiecesLeft == 0 && numberPiecesRight == 0) {\r\n            //Se llama dos veces, ya que la computadora realizará inmediatamente\r\n            //La acción de elegir y insertar en el campo destino.\r\n            //En comparación al humano que lo hace en dos clicks\r\n            String[] parThePositions = currentLogicGame.getOptimalPositionToMove();\r\n\r\n            System.out.println(\"Inicio:\"+parThePositions[0]+\"  Destino:\"+parThePositions[1]);\r\n\r\n            //Buscando la referencia a los botones de la GUI para la First position\r\n            //Luego aplica el primer paso para mover.\r\n            for (JButton myOneBtn : allBtn) {\r\n                if (myOneBtn.getText().equals(parThePositions[0])) {\r\n                    myOneBtn.setIcon(IconContentEmpty);\r\n                    currentLogicGame.removePiece(myOneBtn.getText());\r\n                }\r\n            }\r\n\r\n            //Tiempo de demora\r\n\r\n            TimeUnit.SECONDS.toSeconds(1);\r\n\r\n\r\n            //Buscando la referencia a los botones de la GUI para la End position\r\n            //Luego aplica el segundo paso para mover.\r\n            for (JButton myOneBtn : allBtn) {\r\n                if (myOneBtn.getText().equals(parThePositions[1])) {\r\n                    myOneBtn.setIcon(IconWithPiece2);\r\n                    System.out.println(\"====Moviendo por la computadora\");\r\n                    currentLogicGame.insertPiece(myOneBtn.getText(),\"2\");\r\n                    currentLogicGame.showMatrixTableInTHeConsole();\r\n                    System.out.println(\"=============\");\r\n                    changeTurn();\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    public boolean scoreThreeInARowComputer() {\r\n        boolean validate = false;\r\n        validate = scoreThreeInARow(\"2\");\r\n        if (validate){\r\n            changeTurn();\r\n            // Mostrando alerta de tres en raya\r\n            showIUResult.setText(\"Tres en raya para Computador\");\r\n            //Regresando el tunos, para que jueue nuevamente\r\n            // removeOpponentsPiecesOfUI(c4);\r\n            if (!currentLogicGame.optimalPositionToRemove().equals(\"l\")) {\r\n                String parThePositions1 = currentLogicGame.optimalPositionToRemove();\r\n\r\n                for (JButton myOneBtn : allBtn) {\r\n                    if (myOneBtn.getText().equals((parThePositions1))) {\r\n                        removeOpponentsPiecesOfUI(myOneBtn); //Remueve en el destino la pieza\r\n                        showIUResult.setText(\"\");\r\n                        currentLogicGame.setAvailableContentPiece(myOneBtn.getText(),true);\r\n                        return true;\r\n                    }\r\n                }\r\n\r\n            }\r\n            for (JButton myOneBtn : allBtn){\r\n                int indexRow = currentLogicGame.whatIndexRow(myOneBtn.getText().charAt(1));\r\n                int indexColumn = currentLogicGame.whatIndexColumn(myOneBtn.getText().charAt(0));\r\n                if (currentLogicGame.myTable[indexRow][indexColumn] == \"1\") {\r\n                    removeOpponentsPiecesOfUI(myOneBtn); //Remueve en el destino la pieza\r\n                    showIUResult.setText(\"\");\r\n                    currentLogicGame.setAvailableContentPiece(myOneBtn.getText(),true);\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    public boolean insertPieceByComputer() {\r\n        System.out.println(currentLogicGame.optimalPositionToInsert());\r\n        if (player2.turn == \"uno\" && (numberPiecesLeft != 0 || numberPiecesRight != 0)) {\r\n            if (!currentLogicGame.optimalPositionToInsert2().equals(\"l\")) {\r\n                String parThePositions1 = currentLogicGame.optimalPositionToInsert2();\r\n\r\n                for (JButton myOneBtn : allBtn) {\r\n                    if (myOneBtn.getText().equals((parThePositions1))) {\r\n                        insertPieceToUI(myOneBtn);\r\n                        return true;//Inserta en el destino la pieza\r\n                    }\r\n                }\r\n\r\n            }\r\n            if (!currentLogicGame.optimalPositionToInsert().equals(\"l\")) {\r\n                String parThePositions1 = currentLogicGame.optimalPositionToInsert();\r\n\r\n                for (JButton myOneBtn : allBtn) {\r\n                    if (myOneBtn.getText().equals((parThePositions1))) {\r\n                        insertPieceToUI(myOneBtn);\r\n                        return true;//Inserta en el destino la pieza\r\n                    }\r\n                }\r\n\r\n\r\n            }\r\n\r\n            System.out.println(\"llego aca1\");\r\n            if (currentLogicGame.getIsAvailableContentPiece(\"a1\")) {\r\n                System.out.println(\"llego aca2\");\r\n                insertPieceToUI(a1);\r\n                return true;\r\n            }\r\n            if (currentLogicGame.myTable[6][0] == \"2\" && currentLogicGame.getIsAvailableContentPiece(\"g7\")) {\r\n                System.out.println(\"llego aca3\");\r\n                insertPieceToUI(g7);\r\n                return true;\r\n            }\r\n            if (currentLogicGame.myTable[6][0] == \"2\" && currentLogicGame.myTable[0][6] == \"2\" && currentLogicGame.availableBox[6][6]) {\r\n                System.out.println(\"llego aca4\");\r\n                insertPieceToUI(g1);\r\n                return true;\r\n            }\r\n        }\r\n        for (JButton myOneBtn : allBtn) {\r\n            int indexRow = currentLogicGame.whatIndexRow(myOneBtn.getText().charAt(1));\r\n            int indexColumn = currentLogicGame.whatIndexColumn(myOneBtn.getText().charAt(0));\r\n            if (currentLogicGame.myTable[indexRow][indexColumn] == \"0\" && currentLogicGame.availableBox[indexRow][indexColumn]) {\r\n                //Tiempo de demora\r\n                TimeUnit.SECONDS.toSeconds(1);\r\n\r\n                insertPieceToUI(myOneBtn);\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n\r\n\r\n    // Verifica tres en raya\r\n\r\n    public boolean scoreThreeInARow(String num) {\r\n        boolean threeInArrow = false;\r\n\r\n        for (int[][] oneGroupCase : currentLogicGame.CasesTresEnRaya) {\r\n            int x = oneGroupCase[0][0];\r\n            int y = oneGroupCase[0][1];\r\n            int r = oneGroupCase[1][0];\r\n            int s = oneGroupCase[1][1];\r\n            int m = oneGroupCase[2][0];\r\n            int n = oneGroupCase[2][1];\r\n\r\n            if (currentLogicGame.myTable[x][y].equals(num) && currentLogicGame.myTable[r][s].equals(num) && currentLogicGame.myTable[m][n].equals(num)) {\r\n                String caseTresEnRaya = \"\" + x + y + r + s + m + n;\r\n                System.out.println(caseTresEnRaya);\r\n\r\n                if (!currentLogicGame.isInTheMemory(caseTresEnRaya)) {\r\n                    currentLogicGame.addToMemory(caseTresEnRaya);\r\n                    threeInArrow = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        return threeInArrow;\r\n    }\r\n\r\n    private void initPieces() {\r\n        initPiecesLeft();\r\n        initPiecesRight();\r\n    }\r\n\r\n    // Iniciar piezas sin jugar en la parte izquierda\r\n    private void initPiecesLeft() {\r\n        pieceLeft = new JButton[9];\r\n        pieceLeft[0] = pieceLeft1;\r\n        pieceLeft[1] = pieceLeft2;\r\n        pieceLeft[2] = pieceLeft3;\r\n        pieceLeft[3] = pieceLeft4;\r\n        pieceLeft[4] = pieceLeft5;\r\n        pieceLeft[5] = pieceLeft6;\r\n        pieceLeft[6] = pieceLeft7;\r\n        pieceLeft[7] = pieceLeft8;\r\n        pieceLeft[8] = pieceLeft9;\r\n        // Llenar los iconos\r\n        for (int i = 0; i < 9; i++) {\r\n            for (int j = 0; j < 9; j++) {\r\n                pieceLeft[i].setIcon(IconWithPiece1);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Iniciar piezas sin jugar en la parte derecha\r\n    private void initPiecesRight() {\r\n        pieceRight = new JButton[9];\r\n        pieceRight[0] = pieceRight1;\r\n        pieceRight[1] = pieceRight2;\r\n        pieceRight[2] = pieceRight3;\r\n        pieceRight[3] = pieceRight4;\r\n        pieceRight[4] = pieceRight5;\r\n        pieceRight[5] = pieceRight6;\r\n        pieceRight[6] = pieceRight7;\r\n        pieceRight[7] = pieceRight8;\r\n        pieceRight[8] = pieceRight9;\r\n        // Llenar los iconos\r\n        for (int i = 0; i < 9; i++) {\r\n            for (int j = 0; j < 9; j++) {\r\n                pieceRight[i].setIcon(IconWithPiece2);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public void restart() {\r\n        currentLogicGame.fillInBoxes();\r\n        currentLogicGame.fillMyTable();\r\n        numberPiecesLeft = 9;\r\n        numberPiecesRight = 9;\r\n        existTicTacToe = false;\r\n        showIUResult.setText(\"\");\r\n        initPieces();\r\n        // a\r\n        a7.setIcon(IconContentEmpty);\r\n        a4.setIcon(IconContentEmpty);\r\n        a1.setIcon(IconContentEmpty);\r\n        // b\r\n        b6.setIcon(IconContentEmpty);\r\n        b4.setIcon(IconContentEmpty);\r\n        b2.setIcon(IconContentEmpty);\r\n        // c\r\n        c5.setIcon(IconContentEmpty);\r\n        c4.setIcon(IconContentEmpty);\r\n        c3.setIcon(IconContentEmpty);\r\n        // d\r\n        d7.setIcon(IconContentEmpty);\r\n        d6.setIcon(IconContentEmpty);\r\n        d5.setIcon(IconContentEmpty);\r\n        d3.setIcon(IconContentEmpty);\r\n        d2.setIcon(IconContentEmpty);\r\n        d1.setIcon(IconContentEmpty);\r\n        // e\r\n        e5.setIcon(IconContentEmpty);\r\n        e4.setIcon(IconContentEmpty);\r\n        e3.setIcon(IconContentEmpty);\r\n        // f\r\n        f6.setIcon(IconContentEmpty);\r\n        f4.setIcon(IconContentEmpty);\r\n        f2.setIcon(IconContentEmpty);\r\n        // g\r\n        g7.setIcon(IconContentEmpty);\r\n        g4.setIcon(IconContentEmpty);\r\n        g1.setIcon(IconContentEmpty);\r\n\r\n        // Limpiando tres en raya\r\n        currentLogicGame.MenoryTreEnRaya.clear();\r\n        // Escoger Turno\r\n        chooseTurn();\r\n    }\r\n\r\n    // Escoger turno\r\n    private void chooseTurn() {\r\n        WhoPlaysFirst whoPlaysFirst = new WhoPlaysFirst(this, true, player1.name, player2.name);\r\n        whoPlaysFirst.setVisible(true);\r\n\r\n        String turn = whoPlaysFirst.getTurn();\r\n        if (player1.name.equals(turn)) {\r\n            player1.turn = \"uno\";\r\n            player2.turn = \"dos\";\r\n        } else {\r\n            player2.turn = \"uno\";\r\n            player1.turn = \"dos\";\r\n        }\r\n        showTurnInUI();\r\n    }\r\n\r\n    private void addMenuBar() {\r\n        // Barra de Menú\r\n        JMenuBar menuBar = new JMenuBar();\r\n\r\n        // Menús en la Barra de Menú\r\n        JMenu menu = new JMenu(\"Menu\");\r\n        JMenu help = new JMenu(\"Ayuda\");\r\n\r\n        // items del menú \"menu\"\r\n        JMenuItem playAgain = new JMenuItem(\"Jugar de Nuevo\");\r\n        JMenuItem showResults = new JMenuItem(\"Mostrar Resultados\");\r\n        JMenuItem quit = new JMenuItem(\"Salir\");\r\n\r\n        // items de menú \"ayuda\"\r\n        JMenuItem tutorial = new JMenuItem(\"Tutorial\");\r\n\r\n        // Iconos del menú \"Menu\"\r\n        ImageIcon imgPlayAgain = new ImageIcon(\"src/main/resources/Image/imgPlayAgain.png\");\r\n        ImageIcon imgShowResults = new ImageIcon(\"src/main/resources/Image/imgShowResults.png\");\r\n        ImageIcon imgQuit = new ImageIcon(\"src/main/resources/Image/imgQuit.png\");\r\n        playAgain.setIcon(imgPlayAgain);\r\n        showResults.setIcon(imgShowResults);\r\n        quit.setIcon(imgQuit);\r\n\r\n        // Iconos del menu \"Ayuda\"\r\n        ImageIcon imgTutorial = new ImageIcon(\"src/main/resources/Image/imgTutorial.png\");\r\n        tutorial.setIcon(imgTutorial);\r\n\r\n        // Evento para reinciar el juego\r\n        playAgain.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                restart();\r\n            }\r\n        });\r\n\r\n        // Evento para ver resultados\r\n        showResults.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                showWindowShowResults();\r\n            }\r\n        });\r\n\r\n        // Evento para salir del juego\r\n        quit.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                System.exit(0);\r\n            }\r\n        });\r\n\r\n        // Eventos para ver tutorial\r\n        tutorial.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                try {\r\n                    Desktop.getDesktop().browse(new URI(\"http://www.dma.fi.upm.es/recursos/aplicaciones/matematicas_recreativas/web/nine_mens_morris/reglas.html\"));\r\n                } catch (URISyntaxException | IOException ex) {\r\n                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);\r\n                }\r\n            }\r\n        });\r\n        // Colores\r\n        menu.setForeground(Color.white);\r\n        help.setForeground(Color.white);\r\n        menuBar.setBackground(new Color(43, 43, 43));\r\n\r\n        // Agragando items al menú \"ayuda\"\r\n        help.add(tutorial);\r\n\r\n        // Agregando items al menu \"menu\"\r\n        menu.add(playAgain);\r\n        menu.add(showResults);\r\n        menu.add(quit);\r\n\r\n        // Agregando menús(menu y ayuda) a la barra de menú\r\n        menuBar.add(menu);\r\n        menuBar.add(help);\r\n\r\n        // Agregando la barra de menú a la ventana\r\n        setJMenuBar(menuBar);\r\n    }\r\n\r\n    private void showWindowShowResults() {\r\n        WindowShowResults windowShowResults = new WindowShowResults(this, true, player1.name, player2.name, player1.victories, player2.victories);\r\n        windowShowResults.setVisible(true);\r\n    }\r\n\r\n\r\n    public MainFrame() {\r\n        //Caracteristicas de la ventana que se va abrir\r\n        setSize(300, 300);\r\n        setContentPane(PanelPrincipal);\r\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n        setBounds(250, 100, 720, 520);\r\n        setBounds(250, 100, 820, 620);\r\n        addMenuBar();\r\n\r\n        a7.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                actionPlayerAtTheTime(a7);\r\n\r\n            }\r\n        });\r\n        b6.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                actionPlayerAtTheTime(b6);\r\n            }\r\n        });\r\n        d7.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                actionPlayerAtTheTime(d7);\r\n            }\r\n        });\r\n        g7.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                actionPlayerAtTheTime(g7);\r\n            }\r\n        });\r\n        d6.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                actionPlayerAtTheTime(d6);\r\n            }\r\n        });\r\n        f6.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                actionPlayerAtTheTime(f6);\r\n            }\r\n\r\n        });\r\n        c5.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                actionPlayerAtTheTime(c5);\r\n            }\r\n        });\r\n        d5.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                actionPlayerAtTheTime(d5);\r\n            }\r\n        });\r\n        e5.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                actionPlayerAtTheTime(e5);\r\n            }\r\n        });\r\n        a4.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                actionPlayerAtTheTime(a4);\r\n            }\r\n        });\r\n        b4.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                actionPlayerAtTheTime(b4);\r\n            }\r\n        });\r\n        c4.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                actionPlayerAtTheTime(c4);\r\n            }\r\n        });\r\n        e4.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                actionPlayerAtTheTime(e4);\r\n            }\r\n        });\r\n        f4.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                actionPlayerAtTheTime(f4);\r\n            }\r\n        });\r\n        g4.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                actionPlayerAtTheTime(g4);\r\n            }\r\n        });\r\n        c3.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                actionPlayerAtTheTime(c3);\r\n            }\r\n        });\r\n        d3.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                actionPlayerAtTheTime(d3);\r\n            }\r\n        });\r\n        e3.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                actionPlayerAtTheTime(e3);\r\n            }\r\n        });\r\n        b2.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                actionPlayerAtTheTime(b2);\r\n            }\r\n        });\r\n        d2.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                actionPlayerAtTheTime(d2);\r\n            }\r\n        });\r\n        f2.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                actionPlayerAtTheTime(f2);\r\n            }\r\n        });\r\n        a1.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                actionPlayerAtTheTime(a1);\r\n            }\r\n        });\r\n        d1.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                actionPlayerAtTheTime(d1);\r\n            }\r\n        });\r\n        g1.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                actionPlayerAtTheTime(g1);\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    public JPanel getPanelPrincipal() {\r\n        return PanelPrincipal;\r\n    }\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/sprint2/MainFrame.java b/src/main/java/sprint2/MainFrame.java
--- a/src/main/java/sprint2/MainFrame.java	
+++ b/src/main/java/sprint2/MainFrame.java	
@@ -329,7 +329,8 @@
 
         //Siempre entra a este método, pero en el método se pregunta si
         //la computadora puede mover o no. De lo contrario deja sin efecto.
-        if (isPlayerAComputer) {
+        if (isPlayerAComputer ) {
+
             actionComputer();
         }
     }
@@ -420,7 +421,7 @@
         return false;
     }
     public boolean insertPieceByComputer() {
-        System.out.println(currentLogicGame.optimalPositionToInsert());
+        System.out.println(player2.turn);
         if (player2.turn == "uno" && (numberPiecesLeft != 0 || numberPiecesRight != 0)) {
             if (!currentLogicGame.optimalPositionToInsert2().equals("l")) {
                 String parThePositions1 = currentLogicGame.optimalPositionToInsert2();
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"17595a29-e4e0-49ef-b30b-3e2bc1cdac68\" name=\"Changes\" comment=\"\">\r\n      <change afterPath=\"$PROJECT_DIR$/src/test/java/sprint2/MainFrameTest.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/sprint2/Logic.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/sprint2/Logic.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/sprint2/MainFrame.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/sprint2/MainFrame.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/test/java/sprint2/LogicTest.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/test/java/sprint2/LogicTest.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"CodeStyleSettingsInfer\">\r\n    <option name=\"done\" value=\"true\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n        <option value=\"JUnit5 Test Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectCodeStyleSettingsMigration\">\r\n    <option name=\"version\" value=\"2\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"29dCaFArQTeYvkpA6KAfg9EvHsk\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"UI_DESIGNER_EDITOR_MODE.PaletteManager.SHOW\": \"true\",\r\n    \"UI_DESIGNER_EDITOR_MODE.UIDesignerToolWindowManager.SHOW\": \"true\",\r\n    \"UI_DESIGNER_EDITOR_MODE.UIDesignerToolWindowManager.WIDTH\": \"301\",\r\n    \"com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrary\": \"JUnit5\",\r\n    \"com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrarySuperClass.JUnit5\": \"\",\r\n    \"last_opened_file_path\": \"C:/Users/Usuario/Desktop/Nine-men-s-morris-Grupo10\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\Usuario\\Desktop\\carpeta\\Nine-men-s-morris-Grupo10\\src\\main\\java\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"$PROJECT_DIR$/src/main/java/sprint2\" />\r\n    </key>\r\n    <key name=\"CreateTestDialog.Recents.Supers\">\r\n      <recent name=\"\" />\r\n    </key>\r\n    <key name=\"MoveClassesOrPackagesDialog.RECENTS_KEY\">\r\n      <recent name=\"sprint1\" />\r\n    </key>\r\n    <key name=\"CreateTestDialog.RecentsKey\">\r\n      <recent name=\"sprint2\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Application.sprint2.Main\">\r\n    <configuration name=\"sprint2.Main\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"sprint2.Main\" />\r\n      <module name=\"NIneGame\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"sprint2.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"LogicTest\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"NIneGame\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"sprint2.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <option name=\"PACKAGE_NAME\" value=\"sprint2\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"sprint2.LogicTest\" />\r\n      <option name=\"TEST_OBJECT\" value=\"class\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"LogicTest.insertAndRemovePieceTest\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"NIneGame\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"sprint2.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <option name=\"PACKAGE_NAME\" value=\"sprint2\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"sprint2.LogicTest\" />\r\n      <option name=\"METHOD_NAME\" value=\"insertAndRemovePieceTest\" />\r\n      <option name=\"TEST_OBJECT\" value=\"method\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"MainFrameTest\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"NIneGame\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"sprint2.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <option name=\"PACKAGE_NAME\" value=\"sprint2\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"sprint2.MainFrameTest\" />\r\n      <option name=\"TEST_OBJECT\" value=\"class\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"MainFrameTest.movePieceByTheComputerTest\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"NIneGame\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"sprint2.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <option name=\"PACKAGE_NAME\" value=\"sprint2\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"sprint2.MainFrameTest\" />\r\n      <option name=\"METHOD_NAME\" value=\"movePieceByTheComputerTest\" />\r\n      <option name=\"TEST_OBJECT\" value=\"method\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.sprint2.Main\" />\r\n        <item itemvalue=\"JUnit.MainFrameTest\" />\r\n        <item itemvalue=\"JUnit.LogicTest\" />\r\n        <item itemvalue=\"JUnit.LogicTest.insertAndRemovePieceTest\" />\r\n        <item itemvalue=\"JUnit.MainFrameTest.movePieceByTheComputerTest\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"17595a29-e4e0-49ef-b30b-3e2bc1cdac68\" name=\"Changes\" comment=\"Actualizando workspa.xml\" />\r\n      <created>1653433654849</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1653433654849</updated>\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	
+++ b/.idea/workspace.xml	
@@ -4,12 +4,11 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="17595a29-e4e0-49ef-b30b-3e2bc1cdac68" name="Changes" comment="">
-      <change afterPath="$PROJECT_DIR$/src/test/java/sprint2/MainFrameTest.java" afterDir="false" />
+    <list default="true" id="b44b8ef1-a58d-4369-9da8-edb636b1f71e" name="Changes" comment="">
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_5_28_22__5_25_PM__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_5_28_22__5_25_PM__Changes_.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/sprint2/Logic.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/sprint2/Logic.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/sprint2/MainFrame.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/sprint2/MainFrame.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/test/java/sprint2/LogicTest.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/java/sprint2/LogicTest.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -42,18 +41,18 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "RunOnceActivity.OpenProjectViewOnStart": "true",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "UI_DESIGNER_EDITOR_MODE.PaletteManager.SHOW": "true",
-    "UI_DESIGNER_EDITOR_MODE.UIDesignerToolWindowManager.SHOW": "true",
-    "UI_DESIGNER_EDITOR_MODE.UIDesignerToolWindowManager.WIDTH": "301",
-    "com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrary": "JUnit5",
-    "com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrarySuperClass.JUnit5": "",
-    "last_opened_file_path": "C:/Users/Usuario/Desktop/Nine-men-s-morris-Grupo10"
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;UI_DESIGNER_EDITOR_MODE.PaletteManager.SHOW&quot;: &quot;true&quot;,
+    &quot;UI_DESIGNER_EDITOR_MODE.UIDesignerToolWindowManager.SHOW&quot;: &quot;true&quot;,
+    &quot;UI_DESIGNER_EDITOR_MODE.UIDesignerToolWindowManager.WIDTH&quot;: &quot;301&quot;,
+    &quot;com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrary&quot;: &quot;JUnit5&quot;,
+    &quot;com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrarySuperClass.JUnit5&quot;: &quot;&quot;,
+    &quot;last_opened_file_path&quot;: &quot;C:/Users/Usuario/Desktop/Nine-men-s-morris-Grupo10&quot;
   }
-}]]></component>
+}</component>
   <component name="RecentsManager">
     <key name="CopyFile.RECENT_KEYS">
       <recent name="C:\Users\Usuario\Desktop\carpeta\Nine-men-s-morris-Grupo10\src\main\java" />
@@ -73,8 +72,10 @@
   </component>
   <component name="RunManager" selected="Application.sprint2.Main">
     <configuration name="sprint2.Main" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
+      <option name="ALTERNATIVE_JRE_PATH" value="openjdk-18" />
+      <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="true" />
       <option name="MAIN_CLASS_NAME" value="sprint2.Main" />
-      <module name="NIneGame" />
+      <module name="Nine-men-s-morris-Grupo10" />
       <extension name="coverage">
         <pattern>
           <option name="PATTERN" value="sprint2.*" />
