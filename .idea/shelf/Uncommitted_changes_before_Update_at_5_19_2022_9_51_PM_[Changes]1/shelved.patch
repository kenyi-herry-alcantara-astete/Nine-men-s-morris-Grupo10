Index: src/main/java/MainFrame.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\n\r\n\r\npublic class MainFrame extends JFrame {\r\n\r\n    public Player player1;\r\n    public Player player2;\r\n\r\n    public Logic currentLogicGame = new Logic();\r\n\r\n    ImageIcon IconWithPiece1 = new ImageIcon(\"src/main/resources/Image/IconWithPiece1.png\");\r\n    ImageIcon IconWithPiece2 = new ImageIcon(\"src/main/resources/Image/IconWithPiece2.png\");\r\n    ImageIcon IconContentEmpty = new ImageIcon(\"src/main/resources/Image/IconContentPiece.png\");\r\n    ImageIcon IconMove = new ImageIcon(\"src/main/resources/Image/AvailableContent.png\");\r\n\r\n    private JPanel PanelPrincipal;\r\n    private JPanel CenterPanel;\r\n    private JButton a7;\r\n    private JButton d7;\r\n    private JButton g7;\r\n    private JButton b6;\r\n    private JButton d6;\r\n    private JButton f6;\r\n    private JButton c5;\r\n    private JButton d5;\r\n    private JButton e5;\r\n    private JButton a4;\r\n    private JButton b4;\r\n    private JButton c4;\r\n    private JButton e4;\r\n    private JButton f4;\r\n    private JButton g4;\r\n    private JButton c3;\r\n    private JButton d3;\r\n    private JButton e3;\r\n    private JButton b2;\r\n    private JButton d2;\r\n    private JButton f2;\r\n    private JButton a1;\r\n    private JButton d1;\r\n    private JButton g1;\r\n    private JButton pieceLeft1;\r\n    private JButton pieceLeft2;\r\n    private JButton pieceLeft3;\r\n    private JButton pieceLeft4;\r\n    private JButton pieceLeft5;\r\n    private JButton pieceLeft6;\r\n    private JButton pieceLeft7;\r\n    private JButton pieceLeft8;\r\n    private JButton pieceLeft9;\r\n    private JButton pieceRight1;\r\n    private JButton pieceRight2;\r\n    private JButton pieceRight3;\r\n    private JButton pieceRight4;\r\n    private JButton pieceRight5;\r\n    private JButton pieceRight6;\r\n    private JButton pieceRight7;\r\n    private JButton pieceRight8;\r\n    private JButton pieceRight9;\r\n\r\n\r\n    private JButton[] pieceLeft = {pieceLeft1, pieceLeft2, pieceLeft3, pieceLeft4, pieceLeft5, pieceLeft6, pieceLeft7, pieceLeft8, pieceLeft9};\r\n    private JButton[] pieceRight = {pieceRight1, pieceRight2, pieceRight3, pieceRight4, pieceRight5, pieceRight6, pieceRight7, pieceRight8, pieceRight9};\r\n    JLabel namePlayerLeft;\r\n    JLabel namePlayerRight;\r\n    private JLabel showIUResult;\r\n\r\n\r\n    //Methodos que enviaran las entradas de los jugarores\r\n    /**/\r\n\r\n    //Current Player\r\n    public Player currentTurn() {\r\n        if (player1.turn == \"uno\") {\r\n            return player1;\r\n        } else return player2;\r\n    }\r\n\r\n    //Show the turn\r\n    public void showTurnInUI() {\r\n        if (player1.turn == \"uno\") {\r\n            if (namePlayerLeft.getText() == player1.name) {\r\n                namePlayerLeft.setBackground(new Color(94, 0, 215));\r\n                namePlayerRight.setBackground(new Color(32, 36, 74));\r\n            } else {\r\n                namePlayerRight.setBackground(new Color(94, 0, 215));\r\n                namePlayerLeft.setBackground(new Color(32, 36, 74));\r\n            }\r\n        } else {\r\n            if (namePlayerRight.getText() == player2.name) {\r\n                namePlayerRight.setBackground(new Color(94, 0, 215));\r\n                namePlayerLeft.setBackground(new Color(32, 36, 74));\r\n            } else {\r\n                namePlayerLeft.setBackground(new Color(94, 0, 215));\r\n                namePlayerRight.setBackground(new Color(32, 36, 74));\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    //Change turn\r\n    public void changeTurn() {\r\n        String aux = player1.turn;\r\n        player1.turn = player2.turn;\r\n        player2.turn = aux;\r\n        showTurnInUI();\r\n\r\n    }\r\n\r\n    public int numberPiecesLeft = 9;\r\n    public int numberPiecesRight = 9;\r\n\r\n    private JButton lastButton = a7;\r\n    public int numberMove = 0;\r\n    // insetPieceToUI\r\n    public void insertPieceToUI(JButton contentPiece){\r\n            if (currentLogicGame.getIsAvailableContentPiece(contentPiece.getText())) {\r\n                if (numberPiecesLeft != 0 || numberPiecesRight != 0) {\r\n                    if (player1.turn == \"uno\") {\r\n                        contentPiece.setIcon(IconWithPiece1);\r\n                        pieceLeft[9 - numberPiecesLeft].setIcon(IconContentEmpty);\r\n                        numberPiecesLeft--;\r\n                        currentLogicGame.insertPiece(contentPiece.getText(), \"1\");\r\n\r\n                    } else {\r\n                        contentPiece.setIcon(IconWithPiece2);\r\n                        pieceRight[9 - numberPiecesRight].setIcon(IconContentEmpty);\r\n                        numberPiecesRight--;\r\n                        currentLogicGame.insertPiece(contentPiece.getText(), \"2\");\r\n                    }\r\n                    changeTurn();\r\n                } else {\r\n                    System.out.println(\"Todas las piezas insertadas\");\r\n                }\r\n                currentLogicGame.setAvailableContentPiece(contentPiece.getText(), false);\r\n            }\r\n        }\r\n\r\n        int pushKeybord = 0;\r\n\r\n    //mover pieza\r\n    public void movePieceToUI(JButton myMoveContentPiece){\r\n\r\n            if (player1.turn == \"uno\") {\r\n\r\n                if (numberPiecesLeft == 0 && numberPiecesRight == 0 && myMoveContentPiece.getIcon() == IconWithPiece1 && numberMove == 0) {\r\n\r\n                    lastButton = myMoveContentPiece;\r\n                    myMoveContentPiece.setIcon(IconMove);\r\n                    numberMove++;\r\n                    System.out.println(numberMove);\r\n                }\r\n            }\r\n            if (player2.turn == \"uno\") {\r\n\r\n                if (numberPiecesLeft == 0 && numberPiecesRight == 0 && myMoveContentPiece.getIcon() == IconWithPiece2 && numberMove == 0) {\r\n\r\n                    lastButton = myMoveContentPiece;\r\n                    myMoveContentPiece.setIcon(IconMove);\r\n                    numberMove++;\r\n                    pushKeybord++;\r\n                    System.out.println(numberMove);\r\n                }\r\n            }\r\n\r\n\r\n\r\n        if(numberMove == 1 && currentLogicGame.getIsAvailableContentPiece(myMoveContentPiece.getText())){\r\n            System.out.println(\"logic\");\r\n            if(currentLogicGame.validateMove(myMoveContentPiece.getText(), lastButton.getText())) {\r\n                if (currentLogicGame.getIsAvailableContentPiece(myMoveContentPiece.getText())) {\r\n                    System.out.println(numberMove);\r\n                    if (player1.turn == \"uno\") {\r\n                        System.out.println(numberMove);\r\n                        numberPiecesLeft++;\r\n                        insertPieceToUI(myMoveContentPiece);\r\n                        currentLogicGame.movePiece(lastButton.getText());\r\n                        lastButton.setIcon(IconContentEmpty);\r\n                    } else {\r\n                        System.out.println(numberMove);\r\n                        numberPiecesRight++;\r\n                        insertPieceToUI(myMoveContentPiece);\r\n                        currentLogicGame.movePiece(lastButton.getText());\r\n                        lastButton.setIcon(IconContentEmpty);\r\n                    }\r\n                    numberMove--;\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n    //Remove Opponent's pieces\r\n    public void removeOpponentsPiecesOfUI(JButton myContentPieceToRemove){\r\n\r\n            if(myContentPieceToRemove.getIcon() == IconWithPiece1){\r\n                myContentPieceToRemove.setIcon(IconContentEmpty);\r\n                currentLogicGame.removePiece(myContentPieceToRemove.getText());\r\n                player1.numberPieces --;\r\n            }\r\n\r\n        if(myContentPieceToRemove.getIcon() == IconWithPiece2){\r\n                myContentPieceToRemove.setIcon(IconContentEmpty);\r\n                currentLogicGame.removePiece(myContentPieceToRemove.getText());\r\n                player2.numberPieces --;\r\n            }\r\n        if(player1.numberPieces <= 2 && player2.numberPieces <=2 ){\r\n            System.out.println(\"Empate\");\r\n            showIUResult.setText(\"Empate!\");\r\n        }\r\n        changeTurn();\r\n    }\r\n\r\n    //Action Player at the time\r\n    boolean existTicTacToe = false;\r\n\r\n    public void actionPlayerAtTheTime(JButton currentButtonAction) {\r\n\r\n       if(!existTicTacToe){\r\n           if ((numberPiecesLeft != 0 || numberPiecesRight != 0) && (currentLogicGame.getIsAvailableContentPiece(currentButtonAction.getText()))) {\r\n               showIUResult.setText(\"\");\r\n               //In the Beginning\r\n               insertPieceToUI(currentButtonAction);\r\n\r\n               if (player1.turn == \"dos\"){\r\n                   existTicTacToe =  scoreThreeInARow(\"1\");\r\n                   if(existTicTacToe){\r\n                       // Mostrando alerta de tres en raya\r\n                       showIUResult.setText(\"Tres en raya para el jugador 1\");\r\n                       //Regresando el tunos, para que jueue nuevamente\r\n                       changeTurn();\r\n                   }\r\n               }\r\n              else {\r\n                   if(player2.turn == \"dos\"){\r\n                       existTicTacToe= scoreThreeInARow(\"2\");\r\n                       if (existTicTacToe){\r\n                           // Mostrando alerta de tres en raya\r\n                           showIUResult.setText(\"Tres en raya para el jugador 2\");\r\n                           //Regresando el tunos, para que jueue nuevamente\r\n                           changeTurn();\r\n                       }\r\n                   }\r\n               }\r\n\r\n           }\r\n       }else{\r\n            removeOpponentsPiecesOfUI(currentButtonAction);\r\n            existTicTacToe = false;\r\n            showIUResult.setText(\"\");\r\n        }\r\n    }\r\n\r\n\r\n    // Verifica tres en raya\r\n\r\n    public boolean scoreThreeInARow(String num) {\r\n        boolean ganador = false;\r\n\r\n            for (int [][] oneGroupCase: currentLogicGame.CasesTresEnRaya) {\r\n                int x = oneGroupCase[0][0];\r\n                int y = oneGroupCase[0][1];\r\n                int r = oneGroupCase[1][0];\r\n                int s = oneGroupCase[1][1];\r\n                int m = oneGroupCase[2][0];\r\n                int n = oneGroupCase[2][1];\r\n\r\n                if (currentLogicGame.myTable[x][y].equals(num) && currentLogicGame.myTable[r][s].equals(num) && currentLogicGame.myTable[m][n].equals(num)) {\r\n                    String caseTresEnRaya = \"\"+x+y+r+s+m+n;\r\n                    System.out.println(caseTresEnRaya);\r\n                    if(currentLogicGame.isInTheMemory(caseTresEnRaya)){\r\n                        break;\r\n                    }else{\r\n                        currentLogicGame.addToMemory(caseTresEnRaya);\r\n                        ganador = true;\r\n                    }\r\n                }\r\n\r\n        }\r\n\r\n        return ganador;\r\n    }\r\n\r\n    public MainFrame() {\r\n        //Caracteristicas de la ventana que se va abrir\r\n        setSize(300,300);\r\n        setContentPane(PanelPrincipal);\r\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n        setBounds(250,100,720,520);\r\n        setBounds(250,100,820,620);\r\n        setVisible(true);//mostrar la venta FirstPanel\r\n\r\n        a7.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                movePieceToUI(a7);\r\n                actionPlayerAtTheTime(a7);\r\n                insertPieceToUI(a7);\r\n\r\n            }\r\n        });\r\n        b6.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                movePieceToUI(b6);\r\n             actionPlayerAtTheTime(b6);\r\n            insertPieceToUI(b6);\r\n            }\r\n        });\r\n        d7.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                movePieceToUI(d7);\r\n            actionPlayerAtTheTime(d7);\r\n                insertPieceToUI(d7);\r\n            }\r\n        });\r\n        g7.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                movePieceToUI(g7);\r\n                actionPlayerAtTheTime(g7);\r\n                insertPieceToUI(g7);\r\n            }\r\n        });\r\n        d6.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                movePieceToUI(d6);\r\n                actionPlayerAtTheTime(d6);\r\n                insertPieceToUI(d6);\r\n            }\r\n        });\r\n        f6.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                movePieceToUI(f6);\r\n            actionPlayerAtTheTime(f6);\r\n                insertPieceToUI(f6);\r\n            }\r\n\r\n        });\r\n        c5.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                movePieceToUI(c5);\r\n            actionPlayerAtTheTime(c5);\r\n                insertPieceToUI(c5);\r\n            }\r\n        });\r\n        d5.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                movePieceToUI(d5);\r\n            actionPlayerAtTheTime(d5);\r\n                insertPieceToUI(d5);\r\n            }\r\n        });\r\n        e5.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                movePieceToUI(e5);\r\n            actionPlayerAtTheTime(e5);\r\n                insertPieceToUI(e5);\r\n            }\r\n        });\r\n        a4.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                movePieceToUI(a4);\r\n            actionPlayerAtTheTime(a4);\r\n                insertPieceToUI(a4);\r\n            }\r\n        });\r\n        b4.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                movePieceToUI(b4);\r\n            actionPlayerAtTheTime(b4);\r\n                insertPieceToUI(b4);\r\n            }\r\n        });\r\n        c4.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                movePieceToUI(c4);\r\n            actionPlayerAtTheTime(c4);\r\n                insertPieceToUI(c4);\r\n            }\r\n        });\r\n        e4.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                movePieceToUI(e4);\r\n            actionPlayerAtTheTime(e4);\r\n                insertPieceToUI(e4);\r\n            }\r\n        });\r\n        f4.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                movePieceToUI(f4);\r\n            actionPlayerAtTheTime(f4);\r\n                insertPieceToUI(f4);\r\n            }\r\n        });\r\n        g4.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                movePieceToUI(g4);\r\n            actionPlayerAtTheTime(g4);\r\n                insertPieceToUI(g4);\r\n            }\r\n        });\r\n        c3.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                movePieceToUI(c3);\r\n\r\n            actionPlayerAtTheTime(c3);\r\n\r\n                insertPieceToUI(c3);\r\n            }\r\n        });\r\n        d3.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                movePieceToUI(d3);\r\n\r\n            actionPlayerAtTheTime(d3);\r\n\r\n                insertPieceToUI(d3);\r\n            }\r\n        });\r\n        e3.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                movePieceToUI(e3);\r\n\r\n            actionPlayerAtTheTime(e3);\r\n\r\n                insertPieceToUI(e3);\r\n            }\r\n        });\r\n        b2.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                movePieceToUI(b2);\r\n\r\n            actionPlayerAtTheTime(b2);\r\n\r\n                insertPieceToUI(b2);\r\n            }\r\n        });\r\n        d2.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                movePieceToUI(d2);\r\n\r\n            actionPlayerAtTheTime(d2);\r\n\r\n                insertPieceToUI(d2);\r\n            }\r\n        });\r\n        f2.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                movePieceToUI(f2);\r\n\r\n            actionPlayerAtTheTime(f2);\r\n\r\n                insertPieceToUI(f2);\r\n            }\r\n        });\r\n        a1.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                movePieceToUI(a1);\r\n\r\n            actionPlayerAtTheTime(a1);\r\n\r\n                insertPieceToUI(a1);\r\n            }\r\n        });\r\n        d1.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                movePieceToUI(d1);\r\n\r\n            actionPlayerAtTheTime(d1);\r\n                insertPieceToUI(d1);\r\n            }\r\n        });\r\n        g1.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                movePieceToUI(g1);\r\n            actionPlayerAtTheTime(g1);\r\n                insertPieceToUI(g1);\r\n            }\r\n        });\r\n\r\n        //Players\r\n        this.player1 = new Player(\"Kenyi\", \"left\", \"uno\");\r\n        this.player2 = new Player(\"Herry\", \"right\", \"dos\");\r\n\r\n        namePlayerLeft.setText(player1.name);\r\n        namePlayerRight.setText(player2.name);\r\n\r\n        showTurnInUI();\r\n    }\r\n\r\n\r\n    public JPanel getPanelPrincipal(){\r\n        return  PanelPrincipal;\r\n    }\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/MainFrame.java b/src/main/java/MainFrame.java
--- a/src/main/java/MainFrame.java	
+++ b/src/main/java/MainFrame.java	
@@ -176,13 +176,11 @@
                     if (player1.turn == "uno") {
                         System.out.println(numberMove);
                         numberPiecesLeft++;
-                        insertPieceToUI(myMoveContentPiece);
                         currentLogicGame.movePiece(lastButton.getText());
                         lastButton.setIcon(IconContentEmpty);
                     } else {
                         System.out.println(numberMove);
                         numberPiecesRight++;
-                        insertPieceToUI(myMoveContentPiece);
                         currentLogicGame.movePiece(lastButton.getText());
                         lastButton.setIcon(IconContentEmpty);
                     }
@@ -218,6 +216,8 @@
 
     public void actionPlayerAtTheTime(JButton currentButtonAction) {
 
+        movePieceToUI(currentButtonAction);
+
        if(!existTicTacToe){
            if ((numberPiecesLeft != 0 || numberPiecesRight != 0) && (currentLogicGame.getIsAvailableContentPiece(currentButtonAction.getText()))) {
                showIUResult.setText("");
@@ -250,6 +250,7 @@
             removeOpponentsPiecesOfUI(currentButtonAction);
             existTicTacToe = false;
             showIUResult.setText("");
+            currentLogicGame.setAvailableContentPiece(currentButtonAction.getText(),true);
         }
     }
 
@@ -260,6 +261,7 @@
         boolean ganador = false;
 
             for (int [][] oneGroupCase: currentLogicGame.CasesTresEnRaya) {
+                System.out.println(oneGroupCase[0][0]);
                 int x = oneGroupCase[0][0];
                 int y = oneGroupCase[0][1];
                 int r = oneGroupCase[1][0];
@@ -295,210 +297,147 @@
         a7.addActionListener(new ActionListener() {
             @Override
             public void actionPerformed(ActionEvent e) {
-                movePieceToUI(a7);
                 actionPlayerAtTheTime(a7);
-                insertPieceToUI(a7);
 
             }
         });
         b6.addActionListener(new ActionListener() {
             @Override
             public void actionPerformed(ActionEvent e) {
-                movePieceToUI(b6);
              actionPlayerAtTheTime(b6);
-            insertPieceToUI(b6);
             }
         });
         d7.addActionListener(new ActionListener() {
             @Override
             public void actionPerformed(ActionEvent e) {
-                movePieceToUI(d7);
             actionPlayerAtTheTime(d7);
-                insertPieceToUI(d7);
             }
         });
         g7.addActionListener(new ActionListener() {
             @Override
             public void actionPerformed(ActionEvent e) {
-                movePieceToUI(g7);
                 actionPlayerAtTheTime(g7);
-                insertPieceToUI(g7);
             }
         });
         d6.addActionListener(new ActionListener() {
             @Override
             public void actionPerformed(ActionEvent e) {
-                movePieceToUI(d6);
                 actionPlayerAtTheTime(d6);
-                insertPieceToUI(d6);
             }
         });
         f6.addActionListener(new ActionListener() {
             @Override
             public void actionPerformed(ActionEvent e) {
-                movePieceToUI(f6);
             actionPlayerAtTheTime(f6);
-                insertPieceToUI(f6);
             }
 
         });
         c5.addActionListener(new ActionListener() {
             @Override
             public void actionPerformed(ActionEvent e) {
-                movePieceToUI(c5);
             actionPlayerAtTheTime(c5);
-                insertPieceToUI(c5);
             }
         });
         d5.addActionListener(new ActionListener() {
             @Override
             public void actionPerformed(ActionEvent e) {
-                movePieceToUI(d5);
             actionPlayerAtTheTime(d5);
-                insertPieceToUI(d5);
             }
         });
         e5.addActionListener(new ActionListener() {
             @Override
             public void actionPerformed(ActionEvent e) {
-                movePieceToUI(e5);
             actionPlayerAtTheTime(e5);
-                insertPieceToUI(e5);
             }
         });
         a4.addActionListener(new ActionListener() {
             @Override
             public void actionPerformed(ActionEvent e) {
-                movePieceToUI(a4);
             actionPlayerAtTheTime(a4);
-                insertPieceToUI(a4);
             }
         });
         b4.addActionListener(new ActionListener() {
             @Override
             public void actionPerformed(ActionEvent e) {
-                movePieceToUI(b4);
             actionPlayerAtTheTime(b4);
-                insertPieceToUI(b4);
             }
         });
         c4.addActionListener(new ActionListener() {
             @Override
             public void actionPerformed(ActionEvent e) {
-                movePieceToUI(c4);
             actionPlayerAtTheTime(c4);
-                insertPieceToUI(c4);
             }
         });
         e4.addActionListener(new ActionListener() {
             @Override
             public void actionPerformed(ActionEvent e) {
-                movePieceToUI(e4);
             actionPlayerAtTheTime(e4);
-                insertPieceToUI(e4);
             }
         });
         f4.addActionListener(new ActionListener() {
             @Override
             public void actionPerformed(ActionEvent e) {
-                movePieceToUI(f4);
             actionPlayerAtTheTime(f4);
-                insertPieceToUI(f4);
             }
         });
         g4.addActionListener(new ActionListener() {
             @Override
             public void actionPerformed(ActionEvent e) {
-                movePieceToUI(g4);
             actionPlayerAtTheTime(g4);
-                insertPieceToUI(g4);
             }
         });
         c3.addActionListener(new ActionListener() {
             @Override
             public void actionPerformed(ActionEvent e) {
-                movePieceToUI(c3);
-
             actionPlayerAtTheTime(c3);
-
-                insertPieceToUI(c3);
             }
         });
         d3.addActionListener(new ActionListener() {
             @Override
             public void actionPerformed(ActionEvent e) {
-                movePieceToUI(d3);
-
             actionPlayerAtTheTime(d3);
-
-                insertPieceToUI(d3);
             }
         });
         e3.addActionListener(new ActionListener() {
             @Override
             public void actionPerformed(ActionEvent e) {
-                movePieceToUI(e3);
-
             actionPlayerAtTheTime(e3);
-
-                insertPieceToUI(e3);
             }
         });
         b2.addActionListener(new ActionListener() {
             @Override
             public void actionPerformed(ActionEvent e) {
-                movePieceToUI(b2);
-
             actionPlayerAtTheTime(b2);
-
-                insertPieceToUI(b2);
             }
         });
         d2.addActionListener(new ActionListener() {
             @Override
             public void actionPerformed(ActionEvent e) {
-                movePieceToUI(d2);
-
             actionPlayerAtTheTime(d2);
-
-                insertPieceToUI(d2);
             }
         });
         f2.addActionListener(new ActionListener() {
             @Override
             public void actionPerformed(ActionEvent e) {
-                movePieceToUI(f2);
-
             actionPlayerAtTheTime(f2);
-
-                insertPieceToUI(f2);
             }
         });
         a1.addActionListener(new ActionListener() {
             @Override
             public void actionPerformed(ActionEvent e) {
-                movePieceToUI(a1);
-
             actionPlayerAtTheTime(a1);
-
-                insertPieceToUI(a1);
             }
         });
         d1.addActionListener(new ActionListener() {
             @Override
             public void actionPerformed(ActionEvent e) {
-                movePieceToUI(d1);
-
             actionPlayerAtTheTime(d1);
-                insertPieceToUI(d1);
             }
         });
         g1.addActionListener(new ActionListener() {
             @Override
             public void actionPerformed(ActionEvent e) {
-                movePieceToUI(g1);
             actionPlayerAtTheTime(g1);
-                insertPieceToUI(g1);
             }
         });
 
